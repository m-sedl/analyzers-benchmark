{"$schema":"http://json.schemastore.org/sarif-2.1.0-rtm.5","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Infer","informationUri":"https://github.com/facebook/infer","version":"1.1.0","rules":[{"id":"PULSE_RESOURCE_LEAK","shortDescription":{"text":"Pulse Resource Leak"},"helpUri":"https://fbinfer.com/docs/next/all-issue-types#pulse_resource_leak"},{"id":"THREAD_SAFETY_VIOLATION","shortDescription":{"text":"Thread Safety Violation"},"helpUri":"https://fbinfer.com/docs/next/all-issue-types#thread_safety_violation"}]}},"results":[{"message":{"text":"Unprotected write. Non-private method `MethodFactory.RegisterType(...)` indirectly mutates container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.set_Item(...)` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":99,"startColumn":13}},"message":{"text":"<Write on unknown thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":99,"startColumn":13}},"message":{"text":"call to Void MethodFactory.RegisterType(Type,String,String)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":115,"startColumn":21}},"message":{"text":"call to Void MethodFactory.RegisterDefinition(String,MethodInfo,String,String)"}}},{"nestingLevel":2,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"<Write on background thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":99,"startColumn":13}}}]},{"message":{"text":"Unprotected write. Non-private method `MethodFactory.RegisterType(...)` indirectly mutates container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.set_Item(...)` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":115,"startColumn":21}},"message":{"text":"<Write on unknown thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":115,"startColumn":21}},"message":{"text":"call to Void MethodFactory.RegisterDefinition(String,MethodInfo,String,String)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"<Write on background thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":115,"startColumn":21}}}]},{"message":{"text":"Unprotected write. Non-private method `MethodFactory.Clear()` mutates container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.Clear()` outside of synchronization.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":152,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Clear`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":152,"startColumn":13}}}]},{"message":{"text":"Unprotected write. Non-private method `MethodFactory.RegisterDefinition(...)` indirectly mutates container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.set_Item(...)` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":164,"startColumn":13}},"message":{"text":"<Write on unknown thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":164,"startColumn":13}},"message":{"text":"call to Void MethodFactory.RegisterDefinition(String,MethodInfo,String,String)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"<Write on background thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":164,"startColumn":13}}}]},{"message":{"text":"Unprotected write. Non-private method `MethodFactory.RegisterDefinition(...)` mutates container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.set_Item(...)` outside of synchronization.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}}}]},{"message":{"text":"Unprotected write. Non-private method `MethodFactory.RegisterDefinition(...)` mutates container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.set_Item(...)` outside of synchronization.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":200,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":200,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `MethodFactory.TryCreateInstance(...)` indirectly reads without synchronization from container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.TryGetValue(...)`. Potentially races with write in method `MethodFactory.RegisterDefinition(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":213,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":213,"startColumn":13}},"message":{"text":"call to Boolean MethodFactory.TryGetDefinition(String,MethodInfo&)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":281,"startColumn":13}},"message":{"text":"Read of container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `TryGetValue`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":213,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `MethodFactory.TryCreateInstance(...)` reads without synchronization from container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.TryGetValue(...)`. Potentially races with write in method `MethodFactory.RegisterDefinition(...)`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":232,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":232,"startColumn":13}},"message":{"text":"Read of container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `TryGetValue`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":232,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `MethodFactory.CreateInstance(...)` indirectly reads without synchronization from container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.TryGetValue(...)`. Potentially races with write in method `MethodFactory.RegisterDefinition(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":265,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":265,"startColumn":13}},"message":{"text":"call to Boolean MethodFactory.TryCreateInstance(String,ReflectionHelpers$LateBoundMethod&)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":232,"startColumn":13}},"message":{"text":"Read of container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `TryGetValue`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":265,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `MethodFactory.TryGetDefinition(...)` reads without synchronization from container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `Dictionary`2<!0,!1>.TryGetValue(...)`. Potentially races with write in method `MethodFactory.RegisterDefinition(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":281,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":281,"startColumn":13}},"message":{"text":"Read of container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `TryGetValue`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":176,"startColumn":13}},"message":{"text":"Write to container `this.NLog.Config.MethodFactory._nameToMethodInfo` via call to `set_Item`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/MethodFactory.cs"},"region":{"startLine":281,"startColumn":13}}}]},{"message":{"text":"Resource dynamically allocated by constructor NLog.Targets.ConsoleTarget() on line 63 is not closed after the last access at line 67, column 13."},"level":"error","ruleId":"PULSE_RESOURCE_LEAK","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/SimpleConfigurator.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/SimpleConfigurator.cs"},"region":{"startLine":63,"startColumn":13}},"message":{"text":"allocation part of the trace starts here"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/SimpleConfigurator.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/SimpleConfigurator.cs"},"region":{"startLine":63,"startColumn":13}},"message":{"text":"allocated by constructor NLog.Targets.ConsoleTarget() here"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/SimpleConfigurator.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/SimpleConfigurator.cs"},"region":{"startLine":67,"startColumn":13}},"message":{"text":"memory becomes unreachable here"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/SimpleConfigurator.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Config/SimpleConfigurator.cs"},"region":{"startLine":67,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `GlobalDiagnosticsContext.Get(...)` indirectly reads without synchronization from `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`. Potentially races with write in method `GlobalDiagnosticsContext.Clear()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":81,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":81,"startColumn":13}},"message":{"text":"call to String GlobalDiagnosticsContext.Get(String,IFormatProvider)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":93,"startColumn":13}},"message":{"text":"call to Object GlobalDiagnosticsContext.GetObject(String)"}}},{"nestingLevel":2,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":103,"startColumn":13}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetReadOnlyDict()"}}},{"nestingLevel":3,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":157,"startColumn":13}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetWritableDict(Boolean)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":174,"startColumn":17}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":81,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `GlobalDiagnosticsContext.Get(...)` indirectly reads without synchronization from `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`. Potentially races with write in method `GlobalDiagnosticsContext.Clear()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":93,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":93,"startColumn":13}},"message":{"text":"call to Object GlobalDiagnosticsContext.GetObject(String)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":103,"startColumn":13}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetReadOnlyDict()"}}},{"nestingLevel":2,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":157,"startColumn":13}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetWritableDict(Boolean)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":174,"startColumn":17}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":93,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `GlobalDiagnosticsContext.GetObject(...)` indirectly reads without synchronization from `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`. Potentially races with write in method `GlobalDiagnosticsContext.Clear()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":103,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":103,"startColumn":13}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetReadOnlyDict()"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":157,"startColumn":13}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetWritableDict(Boolean)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":174,"startColumn":17}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":103,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `GlobalDiagnosticsContext.GetNames()` indirectly reads without synchronization from `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`. Potentially races with write in method `GlobalDiagnosticsContext.Clear()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":113,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":113,"startColumn":13}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetReadOnlyDict()"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":157,"startColumn":13}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetWritableDict(Boolean)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":174,"startColumn":17}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":113,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `GlobalDiagnosticsContext.Contains(...)` indirectly reads without synchronization from `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`. Potentially races with write in method `GlobalDiagnosticsContext.Clear()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":123,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":123,"startColumn":13}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetReadOnlyDict()"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":157,"startColumn":13}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetWritableDict(Boolean)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":174,"startColumn":17}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":123,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `GlobalDiagnosticsContext.GetReadOnlyDict()` reads without synchronization from `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`. Potentially races with write in method `GlobalDiagnosticsContext.Clear()`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":157,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":157,"startColumn":13}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":150,"startColumn":21}},"message":{"text":"call to Dictionary`2<!0,!1> GlobalDiagnosticsContext.GetWritableDict(Boolean)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":174,"startColumn":17}},"message":{"text":"access to `NLog.GlobalDiagnosticsContext.NLog.GlobalDiagnosticsContext._dictReadOnly`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Contexts/GlobalDiagnosticsContext.cs"},"region":{"startLine":157,"startColumn":13}}}]},{"message":{"text":"Resource dynamically allocated by constructor System.Net.Sockets.Socket(), indirectly via call to `SocketProxy(...)` on line 79 is not closed after the last access at line 89, column 17."},"level":"error","ruleId":"PULSE_RESOURCE_LEAK","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs"},"region":{"startLine":79,"startColumn":13}},"message":{"text":"allocation part of the trace starts here"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs"},"region":{"startLine":79,"startColumn":13}},"message":{"text":"allocated by call to `new` (modelled)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs"},"region":{"startLine":79,"startColumn":13}},"message":{"text":"when calling `SocketProxy..ctor(AddressFamily,SocketType,ProtocolType)` here"}}},{"nestingLevel":2,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/SocketProxy.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/SocketProxy.cs"},"region":{"startLine":54,"startColumn":13}},"message":{"text":"allocated by constructor System.Net.Sockets.Socket() here"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs"},"region":{"startLine":89,"startColumn":17}},"message":{"text":"memory becomes unreachable here"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Internal/NetworkSenders/TcpNetworkSender.cs"},"region":{"startLine":89,"startColumn":17}}}]},{"message":{"text":"Read/Write race. Non-private method `FileContentsLayoutRenderer.Append(...)` reads without synchronization from `this.NLog.LayoutRenderers.FileContentsLayoutRenderer._currentFileContents`. Potentially races with write in method `FileContentsLayoutRenderer.Append(...)`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs"},"region":{"startLine":96,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs"},"region":{"startLine":96,"startColumn":13}},"message":{"text":"access to `this.NLog.LayoutRenderers.FileContentsLayoutRenderer._currentFileContents`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs"},"region":{"startLine":91,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs"},"region":{"startLine":91,"startColumn":21}},"message":{"text":"access to `this.NLog.LayoutRenderers.FileContentsLayoutRenderer._currentFileContents`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/FileContentsLayoutRenderer.cs"},"region":{"startLine":96,"startColumn":13}}}]},{"message":{"text":"Unprotected write. Non-private method `CachedLayoutRendererWrapper.InitializeLayoutRenderer()` writes to field `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":112,"startColumn":17}},"message":{"text":"<Write on unknown thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":112,"startColumn":17}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":144,"startColumn":29}},"message":{"text":"<Write on background thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":144,"startColumn":29}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":112,"startColumn":17}}}]},{"message":{"text":"Unprotected write. Non-private method `CachedLayoutRendererWrapper.CloseLayoutRenderer()` writes to field `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue` outside of synchronization.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":120,"startColumn":17}},"message":{"text":"<Write on unknown thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":120,"startColumn":17}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":144,"startColumn":29}},"message":{"text":"<Write on background thread>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":144,"startColumn":29}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":120,"startColumn":17}}}]},{"message":{"text":"Read/Write race. Non-private method `CachedLayoutRendererWrapper.RenderInner(...)` indirectly reads without synchronization from `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.<Cached>k__BackingField`. Potentially races with write in method `CachedLayoutRendererWrapper.set_CachedSeconds(...)`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":132,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":132,"startColumn":13}},"message":{"text":"call to Boolean CachedLayoutRendererWrapper.get_Cached()"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":78,"startColumn":30}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.<Cached>k__BackingField`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":103,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":103,"startColumn":21}},"message":{"text":"call to Void CachedLayoutRendererWrapper.set_Cached(Boolean)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":78,"startColumn":35}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.<Cached>k__BackingField`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":132,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `CachedLayoutRendererWrapper.RenderInner(...)` indirectly reads without synchronization from `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.<CacheKey>k__BackingField`. Potentially races with write in method `CachedLayoutRendererWrapper.set_CacheKey(...)`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":134,"startColumn":17}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":134,"startColumn":17}},"message":{"text":"call to Layout CachedLayoutRendererWrapper.get_CacheKey()"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":90,"startColumn":34}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.<CacheKey>k__BackingField`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":90,"startColumn":39}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":90,"startColumn":39}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.<CacheKey>k__BackingField`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":134,"startColumn":17}}}]},{"message":{"text":"Read/Write race. Non-private method `CachedLayoutRendererWrapper.RenderInner(...)` indirectly reads without synchronization from `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue`. Potentially races with write in method `CachedLayoutRendererWrapper.RenderInner(...)`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":135,"startColumn":17}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":135,"startColumn":17}},"message":{"text":"call to String CachedLayoutRendererWrapper.LookupValidCachedValue(LogEventInfo,String)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":168,"startColumn":13}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":144,"startColumn":29}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":144,"startColumn":29}},"message":{"text":"access to `this.NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper._cachedValue`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LayoutRenderers/Wrappers/CachedLayoutRendererWrapper.cs"},"region":{"startLine":135,"startColumn":17}}}]},{"message":{"text":"Read/Write race. Non-private method `LogFactory.get_GlobalThreshold()` reads without synchronization from `this.NLog.LogFactory._globalThreshold`. Potentially races with write in method `LogFactory.set_GlobalThreshold(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":363,"startColumn":20}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":363,"startColumn":20}},"message":{"text":"access to `this.NLog.LogFactory._globalThreshold`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":373,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":373,"startColumn":21}},"message":{"text":"access to `this.NLog.LogFactory._globalThreshold`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":363,"startColumn":20}}}]},{"message":{"text":"Read/Write race. Non-private method `LogFactory.IsLoggingEnabled()` reads without synchronization from `this.NLog.LogFactory._supendLoggingCounter`. Potentially races with write in method `LogFactory.ResumeLogging()`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":840,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":840,"startColumn":13}},"message":{"text":"access to `this.NLog.LogFactory._supendLoggingCounter`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":821,"startColumn":17}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":821,"startColumn":17}},"message":{"text":"access to `this.NLog.LogFactory._supendLoggingCounter`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":840,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `LogFactory.BuildLoggerConfiguration(...)` indirectly reads without synchronization from `this.NLog.LogFactory._globalThreshold`. Potentially races with write in method `LogFactory.set_GlobalThreshold(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":870,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":870,"startColumn":13}},"message":{"text":"call to LogLevel LogFactory.get_GlobalThreshold()"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":363,"startColumn":20}},"message":{"text":"access to `this.NLog.LogFactory._globalThreshold`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":373,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":373,"startColumn":21}},"message":{"text":"access to `this.NLog.LogFactory._globalThreshold`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":870,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `LogFactory.Shutdown()` reads without synchronization from `this.NLog.LogFactory._configLoaded`. Potentially races with write in method `LogFactory.Shutdown()`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":1021,"startColumn":9}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":1021,"startColumn":9}},"message":{"text":"access to `this.NLog.LogFactory._configLoaded`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":1016,"startColumn":21}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":1016,"startColumn":21}},"message":{"text":"access to `this.NLog.LogFactory._configLoaded`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogFactory.cs"},"region":{"startLine":1021,"startColumn":9}}}]},{"message":{"text":"Read/Write race. Non-private method `LogManager.IsHiddenAssembly(...)` reads without synchronization from `NLog.LogManager.NLog.LogManager._hiddenAssemblies`. Potentially races with write in method `LogManager.AddHiddenAssembly(...)`.\n Reporting because another access to the same memory occurs on a background thread, although this access may not."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs"},"region":{"startLine":195,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs"},"region":{"startLine":195,"startColumn":13}},"message":{"text":"access to `NLog.LogManager.NLog.LogManager._hiddenAssemblies`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs"},"region":{"startLine":211,"startColumn":17}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs"},"region":{"startLine":211,"startColumn":17}},"message":{"text":"access to `NLog.LogManager.NLog.LogManager._hiddenAssemblies`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/LogManager.cs"},"region":{"startLine":195,"startColumn":13}}}]},{"message":{"text":"Resource dynamically allocated by constructor NLog.Targets.NullTarget() on line 353 is not closed after the last access at line 357, column 13."},"level":"error","ruleId":"PULSE_RESOURCE_LEAK","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/SetupLoadConfigurationExtensions.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/SetupLoadConfigurationExtensions.cs"},"region":{"startLine":353,"startColumn":21}},"message":{"text":"allocation part of the trace starts here"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/SetupLoadConfigurationExtensions.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/SetupLoadConfigurationExtensions.cs"},"region":{"startLine":353,"startColumn":21}},"message":{"text":"allocated by constructor NLog.Targets.NullTarget() here"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/SetupLoadConfigurationExtensions.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/SetupLoadConfigurationExtensions.cs"},"region":{"startLine":357,"startColumn":13}},"message":{"text":"memory becomes unreachable here"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/SetupLoadConfigurationExtensions.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/SetupLoadConfigurationExtensions.cs"},"region":{"startLine":357,"startColumn":13}}}]},{"message":{"text":"Resource dynamically allocated by constructor System.Net.Mail.MailMessage() on line 576 is not closed after the last access at line 580, column 13."},"level":"error","ruleId":"PULSE_RESOURCE_LEAK","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/MailTarget.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/MailTarget.cs"},"region":{"startLine":576,"startColumn":13}},"message":{"text":"allocation part of the trace starts here"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/MailTarget.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/MailTarget.cs"},"region":{"startLine":576,"startColumn":13}},"message":{"text":"allocated by constructor System.Net.Mail.MailMessage() here"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/MailTarget.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/MailTarget.cs"},"region":{"startLine":580,"startColumn":13}},"message":{"text":"memory becomes unreachable here"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/MailTarget.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/MailTarget.cs"},"region":{"startLine":580,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `AsyncTargetWrapper.CloseTarget()` indirectly reads without synchronization from `this.NLog.Targets.Wrappers.AsyncTargetWrapper._requestQueue.NLog.Targets.Wrappers.AsyncRequestQueueBase.<OnOverflow>k__BackingField`. Potentially races with write in method `AsyncTargetWrapper.set_OverflowAction(...)`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":320,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":320,"startColumn":13}},"message":{"text":"call to AsyncTargetWrapperOverflowAction AsyncTargetWrapper.get_OverflowAction()"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":212,"startColumn":20}},"message":{"text":"call to AsyncTargetWrapperOverflowAction AsyncRequestQueueBase.get_OnOverflow()"}}},{"nestingLevel":2,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncRequestQueueBase.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncRequestQueueBase.cs"},"region":{"startLine":54,"startColumn":62}},"message":{"text":"access to `this.NLog.Targets.Wrappers.AsyncTargetWrapper._requestQueue.NLog.Targets.Wrappers.AsyncRequestQueueBase.<OnOverflow>k__BackingField`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":213,"startColumn":20}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":213,"startColumn":20}},"message":{"text":"call to Void AsyncRequestQueueBase.set_OnOverflow(AsyncTargetWrapperOverflowAction)"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncRequestQueueBase.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncRequestQueueBase.cs"},"region":{"startLine":54,"startColumn":67}},"message":{"text":"access to `this.NLog.Targets.Wrappers.AsyncTargetWrapper._requestQueue.NLog.Targets.Wrappers.AsyncRequestQueueBase.<OnOverflow>k__BackingField`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":320,"startColumn":13}}}]},{"message":{"text":"Read/Write race. Non-private method `AsyncTargetWrapper.StartLazyWriterTimer()` indirectly reads without synchronization from `this.NLog.Targets.Wrappers.AsyncTargetWrapper.<TimeToSleepBetweenBatches>k__BackingField`. Potentially races with write in method `AsyncTargetWrapper.set_TimeToSleepBetweenBatches(...)`.\n Reporting because this access may occur on a background thread."},"level":"warning","ruleId":"THREAD_SAFETY_VIOLATION","codeFlows":[{"threadFlows":[{"locations":[{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":334,"startColumn":13}},"message":{"text":"<Read trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":334,"startColumn":13}},"message":{"text":"call to Int32 AsyncTargetWrapper.get_TimeToSleepBetweenBatches()"}}},{"nestingLevel":1,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":151,"startColumn":48}},"message":{"text":"access to `this.NLog.Targets.Wrappers.AsyncTargetWrapper.<TimeToSleepBetweenBatches>k__BackingField`"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":151,"startColumn":53}},"message":{"text":"<Write trace>"}}},{"nestingLevel":0,"location":{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":151,"startColumn":53}},"message":{"text":"access to `this.NLog.Targets.Wrappers.AsyncTargetWrapper.<TimeToSleepBetweenBatches>k__BackingField`"}}}]}]}],"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs","uriBaseId":"/infersharp/home/msedlyarskiy/benchmark/projects/NLog/src/NLog/Targets/Wrappers/AsyncTargetWrapper.cs"},"region":{"startLine":334,"startColumn":13}}}]}]}]}
