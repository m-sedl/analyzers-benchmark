{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "PVS-Studio",
          "semanticVersion": "7.21.0.0",
          "informationUri": "https://pvs-studio.com",
          "rules": [
            {
              "id": "V051",
              "name": "RuleV051",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v051/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v051/"
            },
            {
              "id": "V3072",
              "name": "RuleV3072",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3072/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3072/"
            },
            {
              "id": "V3149",
              "name": "RuleV3149",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3149/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3149/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-476"
                ]
              }
            },
            {
              "id": "V3163",
              "name": "RuleV3163",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3163/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3163/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-1069"
                ]
              }
            },
            {
              "id": "V3111",
              "name": "RuleV3111",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3111/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3111/"
            },
            {
              "id": "V3087",
              "name": "RuleV3087",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3087/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3087/"
            },
            {
              "id": "V3013",
              "name": "RuleV3013",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3013/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3013/"
            },
            {
              "id": "V3024",
              "name": "RuleV3024",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3024/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3024/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V3161",
              "name": "RuleV3161",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3161/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3161/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-686"
                ]
              }
            },
            {
              "id": "V3080",
              "name": "RuleV3080",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3080/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3080/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-476"
                ]
              }
            },
            {
              "id": "V3051",
              "name": "RuleV3051",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3051/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3051/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-704"
                ]
              }
            },
            {
              "id": "V3057",
              "name": "RuleV3057",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3057/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3057/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-628"
                ]
              }
            },
            {
              "id": "V3083",
              "name": "RuleV3083",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3083/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3083/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-367"
                ]
              }
            },
            {
              "id": "V3043",
              "name": "RuleV3043",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3043/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3043/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-483"
                ]
              }
            },
            {
              "id": "V3164",
              "name": "RuleV3164",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3164/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3164/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-544"
                ]
              }
            },
            {
              "id": "V3130",
              "name": "RuleV3130",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3130/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3130/"
            },
            {
              "id": "V3002",
              "name": "RuleV3002",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3002/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3002/"
            },
            {
              "id": "V3052",
              "name": "RuleV3052",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3052/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3052/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-390"
                ]
              }
            },
            {
              "id": "V3090",
              "name": "RuleV3090",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3090/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3090/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-833"
                ]
              }
            },
            {
              "id": "V3139",
              "name": "RuleV3139",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3139/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3139/"
            },
            {
              "id": "V3063",
              "name": "RuleV3063",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3063/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3063/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-571"
                ]
              }
            },
            {
              "id": "V3001",
              "name": "RuleV3001",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3001/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3001/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-571"
                ]
              }
            },
            {
              "id": "V3158",
              "name": "RuleV3158",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3158/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3158/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V3022",
              "name": "RuleV3022",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3022/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3022/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-570"
                ]
              }
            },
            {
              "id": "V3099",
              "name": "RuleV3099",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3099/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3099/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-684"
                ]
              }
            },
            {
              "id": "V3009",
              "name": "RuleV3009",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3009/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3009/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-393"
                ]
              }
            },
            {
              "id": "V3123",
              "name": "RuleV3123",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3123/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3123/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-783"
                ]
              }
            },
            {
              "id": "V3127",
              "name": "RuleV3127",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3127/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3127/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V3068",
              "name": "RuleV3068",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3068/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3068/"
            },
            {
              "id": "V3085",
              "name": "RuleV3085",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3085/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3085/"
            },
            {
              "id": "V3135",
              "name": "RuleV3135",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3135/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3135/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-691"
                ]
              }
            },
            {
              "id": "V3026",
              "name": "RuleV3026",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3026/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3026/"
            },
            {
              "id": "V3126",
              "name": "RuleV3126",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3126/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3126/"
            },
            {
              "id": "V3147",
              "name": "RuleV3147",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3147/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3147/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-567"
                ]
              }
            },
            {
              "id": "V3064",
              "name": "RuleV3064",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3064/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3064/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-369"
                ]
              }
            },
            {
              "id": "V3056",
              "name": "RuleV3056",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3056/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3056/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-682"
                ]
              }
            },
            {
              "id": "V3055",
              "name": "RuleV3055",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3055/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3055/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-481"
                ]
              }
            },
            {
              "id": "V3032",
              "name": "RuleV3032",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3032/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3032/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-835"
                ]
              }
            },
            {
              "id": "V3125",
              "name": "RuleV3125",
              "help": {
                "text": "https://pvs-studio.com/en/docs/warnings/v3125/"
              },
              "helpUri": "https://pvs-studio.com/en/docs/warnings/v3125/",
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-476"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "V051",
          "message": {
            "text": "Some of the references in 'nunit.framework.tests(netcoreapp3.1)' project are missing or incorrect. The analysis results could be incomplete. Consider making the project fully compilable and building it before analysis."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://"
                },
                "region": {
                  "startLine": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'NUnitTestAssemblyRunner' class containing IDisposable members does not itself implement IDisposable. Inspect: TopLevelWorkItem."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Api/NUnitTestAssemblyRunner.cs"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'NUnitTestAssemblyRunner' class containing IDisposable members does not itself implement IDisposable. Inspect: TopLevelWorkItem."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Api/NUnitTestAssemblyRunner.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 25,
                  "startColumn": 1,
                  "startLine": 25
                }
              }
            },
            {
              "message": {
                "text": "The 'NUnitTestAssemblyRunner' class containing IDisposable members does not itself implement IDisposable. Inspect: TopLevelWorkItem."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Api/NUnitTestAssemblyRunner.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 92,
                  "startColumn": 1,
                  "startLine": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3149",
          "message": {
            "text": "Dereferencing the result of 'as' operator inside method can lead to NullReferenceException. Consider inspecting 1st argument."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Api/NUnitTestAssemblyRunner.cs"
                },
                "region": {
                  "startLine": 168,
                  "endLine": 168,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Dereferencing the result of 'as' operator inside method can lead to NullReferenceException. Consider inspecting 1st argument."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Tests/TestSuite.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 85,
                  "startColumn": 1,
                  "startLine": 85
                }
              }
            },
            {
              "message": {
                "text": "Dereferencing the result of 'as' operator inside method can lead to NullReferenceException. Consider inspecting 1st argument."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Api/NUnitTestAssemblyRunner.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 168,
                  "startColumn": 1,
                  "startLine": 168
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Api/DefaultTestAssemblyBuilder.cs"
                },
                "region": {
                  "startLine": 240,
                  "endLine": 240,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/BinarySerializableConstraint.cs"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/BinarySerializableConstraint.cs"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Attributes/TestCaseSourceAttribute.cs"
                },
                "region": {
                  "startLine": 122,
                  "endLine": 122,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ComparisonConstraint.cs"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/CountZeroConstraint.cs"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/EmptyConstraint.cs"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'GreaterThanOrEqualTo' function is fully equivalent to the body of 'AtLeast' function (447, line 456)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "startLine": 447,
                  "endLine": 447,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'GreaterThanOrEqualTo' function is fully equivalent to the body of 'AtLeast' function (447, line 456)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 447,
                  "startColumn": 1,
                  "startLine": 447
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'GreaterThanOrEqualTo' function is fully equivalent to the body of 'AtLeast' function (447, line 456)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 456,
                  "startColumn": 1,
                  "startLine": 456
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'LessThanOrEqualTo' function is fully equivalent to the body of 'AtMost' function (482, line 491)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "startLine": 482,
                  "endLine": 482,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'LessThanOrEqualTo' function is fully equivalent to the body of 'AtMost' function (482, line 491)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 482,
                  "startColumn": 1,
                  "startLine": 482
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'LessThanOrEqualTo' function is fully equivalent to the body of 'AtMost' function (482, line 491)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 491,
                  "startColumn": 1,
                  "startLine": 491
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Member' function is fully equivalent to the body of 'Contains' function (641, line 660)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "startLine": 641,
                  "endLine": 641,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Member' function is fully equivalent to the body of 'Contains' function (641, line 660)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 641,
                  "startColumn": 1,
                  "startLine": 641
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Member' function is fully equivalent to the body of 'Contains' function (641, line 660)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 660,
                  "startColumn": 1,
                  "startLine": 660
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'StartWith' function is fully equivalent to the body of 'StartsWith' function (733, line 742)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "startLine": 733,
                  "endLine": 733,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'StartWith' function is fully equivalent to the body of 'StartsWith' function (733, line 742)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 733,
                  "startColumn": 1,
                  "startLine": 733
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'StartWith' function is fully equivalent to the body of 'StartsWith' function (733, line 742)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 742,
                  "startColumn": 1,
                  "startLine": 742
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'EndWith' function is fully equivalent to the body of 'EndsWith' function (755, line 764)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "startLine": 755,
                  "endLine": 755,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'EndWith' function is fully equivalent to the body of 'EndsWith' function (755, line 764)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 755,
                  "startColumn": 1,
                  "startLine": 755
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'EndWith' function is fully equivalent to the body of 'EndsWith' function (755, line 764)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 764,
                  "startColumn": 1,
                  "startLine": 764
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Match' function is fully equivalent to the body of 'Matches' function (777, line 795)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "startLine": 777,
                  "endLine": 777,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Match' function is fully equivalent to the body of 'Matches' function (777, line 795)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 777,
                  "startColumn": 1,
                  "startLine": 777
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Match' function is fully equivalent to the body of 'Matches' function (777, line 795)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 795,
                  "startColumn": 1,
                  "startLine": 795
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Match' function is fully equivalent to the body of 'Matches' function (786, line 804)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "startLine": 786,
                  "endLine": 786,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Match' function is fully equivalent to the body of 'Matches' function (786, line 804)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 786,
                  "startColumn": 1,
                  "startLine": 786
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Match' function is fully equivalent to the body of 'Matches' function (786, line 804)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ConstraintExpression.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 804,
                  "startColumn": 1,
                  "startLine": 804
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'arg' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/EqualConstraint.cs"
                },
                "region": {
                  "startLine": 402,
                  "endLine": 402,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ExceptionTypeConstraint.cs"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/DelayedConstraint.cs"
                },
                "region": {
                  "startLine": 274,
                  "endLine": 274,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/DelayedConstraint.cs"
                },
                "region": {
                  "startLine": 314,
                  "endLine": 314,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/FileOrDirectoryExistsConstraint.cs"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: left == right. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/FloatingPointNumerics.cs"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: left == right. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/FloatingPointNumerics.cs"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 176,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/NullConstraint.cs"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3161",
          "message": {
            "text": "Comparing variables with 'ReferenceEquals' is incorrect because 'actual' will be boxed if it is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/SameAsConstraint.cs"
                },
                "region": {
                  "startLine": 35,
                  "endLine": 35,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/RangeConstraint.cs"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3080",
          "message": {
            "text": "Possible null dereference inside method. Consider inspecting the 3rd argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ThrowsConstraint.cs"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Possible null dereference inside method. Consider inspecting the 3rd argument."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ThrowsConstraint.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 52,
                  "startColumn": 1,
                  "startLine": 52
                }
              }
            },
            {
              "message": {
                "text": "Possible null dereference inside method. Consider inspecting the 3rd argument."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/ThrowsConstraint.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 81,
                  "startColumn": 1,
                  "startLine": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/TypeConstraint.cs"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'actual' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/XmlSerializableConstraint.cs"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/XmlSerializableConstraint.cs"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/XmlSerializableConstraint.cs"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 50,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: expected == 0.0. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/Numerics.cs"
                },
                "region": {
                  "startLine": 171,
                  "endLine": 171,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: expected == 0.0f. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Constraints/Numerics.cs"
                },
                "region": {
                  "startLine": 216,
                  "endLine": 216,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Builders/NamespaceTreeBuilder.cs"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 62,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Builders/NamespaceTreeBuilder.cs"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3051",
          "message": {
            "text": "An excessive type cast. The object is already of the 'TNode' type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Interfaces/TNode.cs"
                },
                "region": {
                  "startLine": 190,
                  "endLine": 190,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3057",
          "message": {
            "text": "The 'Substring' function could receive the '-1' value while non-negative value is expected. Inspect the second argument."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Interfaces/TNode.cs"
                },
                "region": {
                  "startLine": 397,
                  "endLine": 397,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3111",
          "message": {
            "text": "Checking value of 'result' for null will always return false when generic type is instantiated with a value type."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/ConstraintUtils.cs"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'TestWorker' class containing IDisposable members does not itself implement IDisposable. Inspect: _currentWorkItem."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Execution/TestWorker.cs"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'TestWorker' class containing IDisposable members does not itself implement IDisposable. Inspect: _currentWorkItem."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Execution/TestWorker.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                }
              }
            },
            {
              "message": {
                "text": "The 'TestWorker' class containing IDisposable members does not itself implement IDisposable. Inspect: _currentWorkItem."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Execution/TestWorker.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 83,
                  "startColumn": 1,
                  "startLine": 83
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Execution/TestWorker.cs"
                },
                "region": {
                  "startLine": 140,
                  "endLine": 140,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3083",
          "message": {
            "text": "Unsafe invocation of event 'Busy', NullReferenceException is possible. Consider assigning event to a local variable before invoking it."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Execution/TestWorker.cs"
                },
                "region": {
                  "startLine": 108,
                  "endLine": 108,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3083",
          "message": {
            "text": "Unsafe invocation of event 'Idle', NullReferenceException is possible. Consider assigning event to a local variable before invoking it."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Execution/TestWorker.cs"
                },
                "region": {
                  "startLine": 117,
                  "endLine": 117,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3080",
          "message": {
            "text": "Possible null dereference. Consider inspecting 'shift'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Execution/ParallelWorkItemDispatcher.cs"
                },
                "region": {
                  "startLine": 156,
                  "endLine": 156,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3043",
          "message": {
            "text": "The code's operational logic does not correspond with its formatting. The statement is indented to the right, but it is always executed. It is possible that curly brackets are missing."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Execution/SimpleWorkItem.cs"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 92,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3164",
          "message": {
            "text": "Exception classes should be publicly accessible."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/InvalidPlatformException.cs"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/OSPlatform.cs"
                },
                "region": {
                  "startLine": 126,
                  "endLine": 126,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/OSPlatform.cs"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3130",
          "message": {
            "text": "Priority of the '&&' operator is higher than that of the '||' operator. Possible missing parentheses."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/OSPlatform.cs"
                },
                "region": {
                  "startLine": 396,
                  "endLine": 396,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: max == min. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Randomizer.cs"
                },
                "region": {
                  "startLine": 427,
                  "endLine": 427,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3002",
          "message": {
            "text": "The switch statement does not cover all values of the 'TestStatus' enum: Inconclusive."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Results/TestSuiteResult.cs"
                },
                "region": {
                  "startLine": 208,
                  "endLine": 208,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3002",
          "message": {
            "text": "The switch statement does not cover all values of the 'Status' enum: NotStarted."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/SingleThreadedSynchronizationContext.cs"
                },
                "region": {
                  "startLine": 111,
                  "endLine": 111,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3080",
          "message": {
            "text": "Possible null dereference inside method at 'node.Attributes'. Consider inspecting the 1st argument: topNode.FirstChild."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestFilter.cs"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 128,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Possible null dereference inside method at 'node.Attributes'. Consider inspecting the 1st argument: topNode.FirstChild."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestFilter.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 128,
                  "startColumn": 1,
                  "startLine": 128
                }
              }
            },
            {
              "message": {
                "text": "Possible null dereference inside method at 'node.Attributes'. Consider inspecting the 1st argument: topNode.FirstChild."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestFilter.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 139,
                  "startColumn": 1,
                  "startLine": 139
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3080",
          "message": {
            "text": "Possible null dereference inside method at 'node.Attributes'. Consider inspecting the 1st argument: node.FirstChild."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestFilter.cs"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Possible null dereference inside method at 'node.Attributes'. Consider inspecting the 1st argument: node.FirstChild."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestFilter.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 139,
                  "startColumn": 1,
                  "startLine": 139
                }
              }
            },
            {
              "message": {
                "text": "Possible null dereference inside method at 'node.Attributes'. Consider inspecting the 1st argument: node.FirstChild."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestFilter.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 151,
                  "startColumn": 1,
                  "startLine": 151
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3052",
          "message": {
            "text": "The original exception object 'ex' was swallowed. Stack of original exception could be lost."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Reflect.cs"
                },
                "region": {
                  "startLine": 357,
                  "endLine": 357,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The original exception object 'ex' was swallowed. Stack of original exception could be lost."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Reflect.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 357,
                  "startColumn": 1,
                  "startLine": 357
                }
              }
            },
            {
              "message": {
                "text": "The original exception object 'ex' was swallowed. Stack of original exception could be lost."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Reflect.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 362,
                  "startColumn": 1,
                  "startLine": 362
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3052",
          "message": {
            "text": "The original exception object 'ex' was swallowed. Stack of original exception could be lost."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Reflect.cs"
                },
                "region": {
                  "startLine": 372,
                  "endLine": 372,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The original exception object 'ex' was swallowed. Stack of original exception could be lost."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Reflect.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 372,
                  "startColumn": 1,
                  "startLine": 372
                }
              }
            },
            {
              "message": {
                "text": "The original exception object 'ex' was swallowed. Stack of original exception could be lost."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Reflect.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 377,
                  "startColumn": 1,
                  "startLine": 377
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'TestResult' class containing IDisposable members does not itself implement IDisposable. Inspect: OutWriter."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Results/TestResult.cs"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'TestResult' class containing IDisposable members does not itself implement IDisposable. Inspect: OutWriter."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Results/TestResult.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 22,
                  "startColumn": 1,
                  "startLine": 22
                }
              }
            },
            {
              "message": {
                "text": "The 'TestResult' class containing IDisposable members does not itself implement IDisposable. Inspect: OutWriter."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Results/TestResult.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 277,
                  "startColumn": 1,
                  "startLine": 277
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3090",
          "message": {
            "text": "Unsafe locking on public member 'OutWriter' in class 'TestResult'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Results/TestResult.cs"
                },
                "region": {
                  "startLine": 277,
                  "endLine": 277,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Unsafe locking on public member 'OutWriter' in class 'TestResult'."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Results/TestResult.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 277,
                  "startColumn": 1,
                  "startLine": 277
                }
              }
            },
            {
              "message": {
                "text": "Unsafe locking on public member 'OutWriter' in class 'TestResult'."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Results/TestResult.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 286,
                  "startColumn": 1,
                  "startLine": 286
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/RuntimeFramework.cs"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3002",
          "message": {
            "text": "The switch statement does not cover all values of the 'RuntimeType' enum: SSCLI, MonoTouch."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/RuntimeFramework.cs"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/RuntimeFramework.cs"
                },
                "region": {
                  "startLine": 357,
                  "endLine": 357,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/ThreadUtility.cs"
                },
                "region": {
                  "startLine": 232,
                  "endLine": 232,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Tests/TestSuite.cs"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Tests/TestSuite.cs"
                },
                "region": {
                  "startLine": 191,
                  "endLine": 191,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Tests/TestSuite.cs"
                },
                "region": {
                  "startLine": 261,
                  "endLine": 261,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'GreaterThanOrEqualTo' function is fully equivalent to the body of 'AtLeast' function (181, line 190)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Is.cs"
                },
                "region": {
                  "startLine": 181,
                  "endLine": 181,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'GreaterThanOrEqualTo' function is fully equivalent to the body of 'AtLeast' function (181, line 190)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Is.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 181,
                  "startColumn": 1,
                  "startLine": 181
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'GreaterThanOrEqualTo' function is fully equivalent to the body of 'AtLeast' function (181, line 190)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Is.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 190,
                  "startColumn": 1,
                  "startLine": 190
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'LessThanOrEqualTo' function is fully equivalent to the body of 'AtMost' function (216, line 225)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Is.cs"
                },
                "region": {
                  "startLine": 216,
                  "endLine": 216,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'LessThanOrEqualTo' function is fully equivalent to the body of 'AtMost' function (216, line 225)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Is.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 216,
                  "startColumn": 1,
                  "startLine": 216
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'LessThanOrEqualTo' function is fully equivalent to the body of 'AtMost' function (216, line 225)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Is.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 225,
                  "startColumn": 1,
                  "startLine": 225
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: dbl == double.MaxValue. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestNameGenerator.cs"
                },
                "region": {
                  "startLine": 252,
                  "endLine": 252,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: dbl == double.MinValue. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestNameGenerator.cs"
                },
                "region": {
                  "startLine": 254,
                  "endLine": 254,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: f == float.MaxValue. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestNameGenerator.cs"
                },
                "region": {
                  "startLine": 271,
                  "endLine": 271,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: f == float.MinValue. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/TestNameGenerator.cs"
                },
                "region": {
                  "startLine": 273,
                  "endLine": 273,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3130",
          "message": {
            "text": "Priority of the '&&' operator is higher than that of the '||' operator. Possible missing parentheses."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/ColorConsole.cs"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3139",
          "message": {
            "text": "Two or more case-branches perform the same actions."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/ColorConsole.cs"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 96,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two or more case-branches perform the same actions."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/ColorConsole.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 96,
                  "startColumn": 1,
                  "startLine": 96
                }
              }
            },
            {
              "message": {
                "text": "Two or more case-branches perform the same actions."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/ColorConsole.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 100,
                  "startColumn": 1,
                  "startLine": 100
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3080",
          "message": {
            "text": "Possible null dereference inside method at 'testCase.IsTupleCovered'. Consider inspecting the 1st argument: testCase."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Builders/PairwiseStrategy.cs"
                },
                "region": {
                  "startLine": 308,
                  "endLine": 308,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Possible null dereference inside method at 'testCase.IsTupleCovered'. Consider inspecting the 1st argument: testCase."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Builders/PairwiseStrategy.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 308,
                  "startColumn": 1,
                  "startLine": 308
                }
              }
            },
            {
              "message": {
                "text": "Possible null dereference inside method at 'testCase.IsTupleCovered'. Consider inspecting the 1st argument: testCase."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/framework/Internal/Builders/PairwiseStrategy.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 540,
                  "startColumn": 1,
                  "startLine": 540
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3063",
          "message": {
            "text": "A part of conditional expression is always true if it is evaluated: name != null."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/TestNameParser.cs"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (14, line 16)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (14, line 16)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (14, line 16)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (24, line 26)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (24, line 26)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 24,
                  "startColumn": 1,
                  "startLine": 24
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (24, line 26)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 26,
                  "startColumn": 1,
                  "startLine": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (34, line 36)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (34, line 36)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 34,
                  "startColumn": 1,
                  "startLine": 34
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (34, line 36)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/slow-tests/SlowTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 36,
                  "startColumn": 1,
                  "startLine": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AssertCountFixture.cs"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AssertCountFixture.cs"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3002",
          "message": {
            "text": "The switch statement does not cover all values of the 'TestStatus' enum: Inconclusive."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/TextUI.cs"
                },
                "region": {
                  "startLine": 527,
                  "endLine": 527,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'AsyncTaskError' function is fully equivalent to the body of 'AsyncTaskMultipleError' function (41, line 231)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 41,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'AsyncTaskError' function is fully equivalent to the body of 'AsyncTaskMultipleError' function (41, line 231)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 41,
                  "startColumn": 1,
                  "startLine": 41
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'AsyncTaskError' function is fully equivalent to the body of 'AsyncTaskMultipleError' function (41, line 231)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 231,
                  "startColumn": 1,
                  "startLine": 231
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'AsyncTaskPass' function is fully equivalent to the body of 'TaskPass' function (49, line 92)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'AsyncTaskPass' function is fully equivalent to the body of 'TaskPass' function (49, line 92)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 49,
                  "startColumn": 1,
                  "startLine": 49
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'AsyncTaskPass' function is fully equivalent to the body of 'TaskPass' function (49, line 92)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 92,
                  "startColumn": 1,
                  "startLine": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'AsyncTaskIgnore' function is fully equivalent to the body of 'TaskIgnore' function (56, line 99)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'AsyncTaskIgnore' function is fully equivalent to the body of 'TaskIgnore' function (56, line 99)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 56,
                  "startColumn": 1,
                  "startLine": 56
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'AsyncTaskIgnore' function is fully equivalent to the body of 'TaskIgnore' function (56, line 99)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 99,
                  "startColumn": 1,
                  "startLine": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'AsyncTaskInconclusive' function is fully equivalent to the body of 'TaskInconclusive' function (63, line 106)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'AsyncTaskInconclusive' function is fully equivalent to the body of 'TaskInconclusive' function (63, line 106)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 63,
                  "startColumn": 1,
                  "startLine": 63
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'AsyncTaskInconclusive' function is fully equivalent to the body of 'TaskInconclusive' function (63, line 106)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AsyncRealFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 106,
                  "startColumn": 1,
                  "startLine": 106
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/AssertMultipleData.cs"
                },
                "region": {
                  "startLine": 348,
                  "endLine": 348,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'CountIsAlwaysOne' function is fully equivalent to the body of 'CountIsAlwaysOne_2' function (101, line 108)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'CountIsAlwaysOne' function is fully equivalent to the body of 'CountIsAlwaysOne_2' function (101, line 108)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 101,
                  "startColumn": 1,
                  "startLine": 101
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'CountIsAlwaysOne' function is fully equivalent to the body of 'CountIsAlwaysOne_2' function (101, line 108)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 108,
                  "startColumn": 1,
                  "startLine": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (200, line 206)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "startLine": 200,
                  "endLine": 200,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (200, line 206)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 200,
                  "startColumn": 1,
                  "startLine": 200
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (200, line 206)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 206,
                  "startColumn": 1,
                  "startLine": 206
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'DummyTest1' function is fully equivalent to the body of 'DummyTest2' function (297, line 303)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'DummyTest1' function is fully equivalent to the body of 'DummyTest2' function (297, line 303)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 297,
                  "startColumn": 1,
                  "startLine": 297
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'DummyTest1' function is fully equivalent to the body of 'DummyTest2' function (297, line 303)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 303,
                  "startColumn": 1,
                  "startLine": 303
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (325, line 331)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "startLine": 325,
                  "endLine": 325,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (325, line 331)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 325,
                  "startColumn": 1,
                  "startLine": 325
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (325, line 331)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 331,
                  "startColumn": 1,
                  "startLine": 331
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (379, line 385)."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "startLine": 379,
                  "endLine": 379,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (379, line 385)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 379,
                  "startColumn": 1,
                  "startLine": 379
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'Test1' function is fully equivalent to the body of 'Test2' function (379, line 385)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/LifeCycleFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 385,
                  "startColumn": 1,
                  "startLine": 385
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'TestMethodWithArgumentsProvided' function is fully equivalent to the body of 'StaticTestMethodWithArgumentsProvided' function."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/TestMethodSignatureFixture.cs"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'TestMethodWithArgumentsProvided' function is fully equivalent to the body of 'StaticTestMethodWithArgumentsProvided' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/TestMethodSignatureFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 36,
                  "startColumn": 1,
                  "startLine": 36
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'TestMethodWithArgumentsProvided' function is fully equivalent to the body of 'StaticTestMethodWithArgumentsProvided' function."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/TestMethodSignatureFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 44,
                  "startColumn": 1,
                  "startLine": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3164",
          "message": {
            "text": "Exception classes should be publicly accessible."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/UnexpectedExceptionFixture.cs"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 66,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3158",
          "message": {
            "text": "The '2 / 2' expression always evaluates to 1. Absolute values of both operands are equal."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AdhocTestExecutionTests.cs"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3158",
          "message": {
            "text": "The '2 / 2' expression always evaluates to 1. Absolute values of both operands are equal."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AdhocTestExecutionTests.cs"
                },
                "region": {
                  "startLine": 169,
                  "endLine": 169,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 19,
                  "endLine": 19,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '!=' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '!=' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '!=' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '!=' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 63,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '!=' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 81,
                  "endLine": 81,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '!=' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 87,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 93,
                  "endLine": 93,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '!=' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 106,
                  "endLine": 106,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '!=' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 113,
                  "endLine": 113,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 297,
                  "endLine": 297,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 != 5' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 303,
                  "endLine": 303,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 309,
                  "endLine": 309,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 != 5' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 315,
                  "endLine": 315,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 321,
                  "endLine": 321,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 != 5' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 327,
                  "endLine": 327,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 334,
                  "endLine": 334,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 != 5' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 341,
                  "endLine": 341,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 347,
                  "endLine": 347,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 != 5' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 353,
                  "endLine": 353,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 359,
                  "endLine": 359,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 != 5' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 365,
                  "endLine": 365,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 371,
                  "endLine": 371,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 != 5' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 377,
                  "endLine": 377,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 384,
                  "endLine": 384,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 != 5' is always true."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/testdata/WarningFixture.cs"
                },
                "region": {
                  "startLine": 391,
                  "endLine": 391,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3002",
          "message": {
            "text": "The switch statement does not cover all values of the 'TestStatus' enum: Warning."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Api/TestAssemblyRunnerTests.cs"
                },
                "region": {
                  "startLine": 559,
                  "endLine": 559,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3099",
          "message": {
            "text": "Not all the members of 'OptionException' type are serialized inside 'GetObjectData' method: OptionName."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/Options.cs"
                },
                "region": {
                  "startLine": 490,
                  "endLine": 490,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Not all the members of 'OptionException' type are serialized inside 'GetObjectData' method: OptionName."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/Options.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 487,
                  "startColumn": 1,
                  "startLine": 487
                }
              }
            },
            {
              "message": {
                "text": "Not all the members of 'OptionException' type are serialized inside 'GetObjectData' method: OptionName."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/Options.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 490,
                  "startColumn": 1,
                  "startLine": 490
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3009",
          "message": {
            "text": "It's odd that this method always returns one and the same value of 'false'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/Options.cs"
                },
                "region": {
                  "startLine": 703,
                  "endLine": 703,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3123",
          "message": {
            "text": "Perhaps the '?:' operator works in a different way than it was expected. Its priority is lower than priority of other operators in its condition."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/Options.cs"
                },
                "region": {
                  "startLine": 948,
                  "endLine": 948,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3024",
          "message": {
            "text": "An odd precise comparison: expected == actual. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssertEqualsTests.cs"
                },
                "region": {
                  "startLine": 184,
                  "endLine": 184,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3051",
          "message": {
            "text": "An excessive type cast. The object is already of the 'ArgumentException' type."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssertThrowsTests.cs"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 86,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssertThatTests.cs"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssertThatTests.cs"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssertThatTests.cs"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssertThatTests.cs"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 39,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '0 + 1' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssertThatTests.cs"
                },
                "region": {
                  "startLine": 262,
                  "endLine": 262,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 46,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 145,
                  "endLine": 145,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 173,
                  "endLine": 173,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 179,
                  "endLine": 179,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 186,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '2 + 2 == 5' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 194,
                  "endLine": 194,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '0 + 1' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 296,
                  "endLine": 296,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '1 + 1 == 1' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/AssumeThatTests.cs"
                },
                "region": {
                  "startLine": 314,
                  "endLine": 314,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3127",
          "message": {
            "text": "Two similar code fragments were found. Perhaps, this is a typo and 'f2' variable should be used instead of 'f1'"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/LessEqualFixture.cs"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 75,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Two similar code fragments were found. Perhaps, this is a typo and 'f2' variable should be used instead of 'f1'"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/LessEqualFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 52,
                  "startColumn": 1,
                  "startLine": 52
                }
              }
            },
            {
              "message": {
                "text": "Two similar code fragments were found. Perhaps, this is a typo and 'f2' variable should be used instead of 'f1'"
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/LessEqualFixture.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 75,
                  "startColumn": 1,
                  "startLine": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/AsyncExecutionApiAdapter.Assert-based.cs"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 21,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/AsyncExecutionApiAdapter.Assert-based.cs"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '0 + 1' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/WarningTests.cs"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression '1 + 1 == 1' is always false."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Assertions/WarningTests.cs"
                },
                "region": {
                  "startLine": 183,
                  "endLine": 183,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/PairwiseTests.cs"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 82,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ParameterizedTestFixtureTests.cs"
                },
                "region": {
                  "startLine": 118,
                  "endLine": 118,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3068",
          "message": {
            "text": "Calling overrideable class member 'ConfigureOptions' from constructor is dangerous."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite/CommandLineOptions.cs"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3085",
          "message": {
            "text": "The name of 'Numerators' field in a nested type is ambiguous. The outer type contains static field with identical name."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "startLine": 132,
                  "endLine": 132,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The name of 'Numerators' field in a nested type is ambiguous. The outer type contains static field with identical name."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 117,
                  "startColumn": 1,
                  "startLine": 117
                }
              }
            },
            {
              "message": {
                "text": "The name of 'Numerators' field in a nested type is ambiguous. The outer type contains static field with identical name."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 132,
                  "startColumn": 1,
                  "startLine": 132
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3085",
          "message": {
            "text": "The name of 'Denominators' field in a nested type is ambiguous. The outer type contains static field with identical name."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "startLine": 133,
                  "endLine": 133,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The name of 'Denominators' field in a nested type is ambiguous. The outer type contains static field with identical name."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 118,
                  "startColumn": 1,
                  "startLine": 118
                }
              }
            },
            {
              "message": {
                "text": "The name of 'Denominators' field in a nested type is ambiguous. The outer type contains static field with identical name."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 133,
                  "startColumn": 1,
                  "startLine": 133
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3085",
          "message": {
            "text": "The name of 'Quotients' field in a nested type is ambiguous. The outer type contains static field with identical name."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "startLine": 134,
                  "endLine": 134,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The name of 'Quotients' field in a nested type is ambiguous. The outer type contains static field with identical name."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 119,
                  "startColumn": 1,
                  "startLine": 119
                }
              }
            },
            {
              "message": {
                "text": "The name of 'Quotients' field in a nested type is ambiguous. The outer type contains static field with identical name."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/ValueSourceTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 134,
                  "startColumn": 1,
                  "startLine": 134
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3164",
          "message": {
            "text": "Exception classes should be publicly accessible."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/AwaitableReturnTypeTests.cs"
                },
                "region": {
                  "startLine": 195,
                  "endLine": 195,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'AndConstraintTests' class containing IDisposable members does not itself implement IDisposable. Inspect: messageWriter."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/AndConstraintTests.cs"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'AndConstraintTests' class containing IDisposable members does not itself implement IDisposable. Inspect: messageWriter."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/AndConstraintTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 9,
                  "startColumn": 1,
                  "startLine": 9
                }
              }
            },
            {
              "message": {
                "text": "The 'AndConstraintTests' class containing IDisposable members does not itself implement IDisposable. Inspect: messageWriter."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/AndConstraintTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2+2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/BasicConstraintTests.cs"
                },
                "region": {
                  "startLine": 37,
                  "endLine": 37,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2+2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/BasicConstraintTests.cs"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 61,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'CollectionEquivalentConstraintResultTests' class containing IDisposable members does not itself implement IDisposable. Inspect: _writer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/CollectionEquivalentConstraintResultTests.cs"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'CollectionEquivalentConstraintResultTests' class containing IDisposable members does not itself implement IDisposable. Inspect: _writer."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/CollectionEquivalentConstraintResultTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                }
              }
            },
            {
              "message": {
                "text": "The 'CollectionEquivalentConstraintResultTests' class containing IDisposable members does not itself implement IDisposable. Inspect: _writer."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/CollectionEquivalentConstraintResultTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 15
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3135",
          "message": {
            "text": "The initial value of the index in the nested loop equals 'j = i'. Perhaps, 'j = i' + 1 should be used instead."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/CollectionEqualsTests.cs"
                },
                "region": {
                  "startLine": 154,
                  "endLine": 154,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The initial value of the index in the nested loop equals 'j = i'. Perhaps, 'j = i' + 1 should be used instead."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/CollectionEqualsTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 152,
                  "startColumn": 1,
                  "startLine": 152
                }
              }
            },
            {
              "message": {
                "text": "The initial value of the index in the nested loop equals 'j = i'. Perhaps, 'j = i' + 1 should be used instead."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/CollectionEqualsTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 154,
                  "startColumn": 1,
                  "startLine": 154
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression 'isNetCore' is always true."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/TestCaseAttributeTests.cs"
                },
                "region": {
                  "startLine": 450,
                  "endLine": 450,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3022",
          "message": {
            "text": "Expression 'isNetCore' is always true."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Attributes/TestCaseAttributeTests.cs"
                },
                "region": {
                  "startLine": 489,
                  "endLine": 489,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3026",
          "message": {
            "text": "The constant 2.718281d is being utilized. The resulting value could be inaccurate. Consider using Math.E."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/NumericsTest.cs"
                },
                "region": {
                  "startLine": 151,
                  "endLine": 151,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3126",
          "message": {
            "text": "Type 'NeverEqualIEquatable' implementing IEquatable<T> interface does not override 'GetHashCode' method."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/NUnitEqualityComparerTests.cs"
                },
                "region": {
                  "startLine": 492,
                  "endLine": 492,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3126",
          "message": {
            "text": "Type 'IEquatableWithoutEqualsOverridden' implementing IEquatable<T> interface does not override 'GetHashCode' method."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/NUnitEqualityComparerTests.cs"
                },
                "region": {
                  "startLine": 500,
                  "endLine": 500,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3126",
          "message": {
            "text": "Type 'EquatableObject' implementing IEquatable<T> interface does not override 'GetHashCode' method."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/NUnitEqualityComparerTests.cs"
                },
                "region": {
                  "startLine": 530,
                  "endLine": 530,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3126",
          "message": {
            "text": "Type 'InheritingEquatableObject' implementing IEquatable<T> interface does not override 'GetHashCode' method."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Constraints/NUnitEqualityComparerTests.cs"
                },
                "region": {
                  "startLine": 542,
                  "endLine": 542,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/CultureSettingAndDetectionTests.cs"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 99,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/CultureSettingAndDetectionTests.cs"
                },
                "region": {
                  "startLine": 112,
                  "endLine": 112,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/CultureSettingAndDetectionTests.cs"
                },
                "region": {
                  "startLine": 125,
                  "endLine": 125,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3147",
          "message": {
            "text": "Non-atomic modification of volatile variable 'this.receivedEvents'"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/EventQueueTests.cs"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 129,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3064",
          "message": {
            "text": "Potential division by zero. Consider inspecting denominator 'numberOfAsynchronousEvents'."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/EventQueueTests.cs"
                },
                "region": {
                  "startLine": 212,
                  "endLine": 212,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'EventListenerTextWriterTests' class containing IDisposable members does not itself implement IDisposable. Inspect: ListenerWriter."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/EventListenerTextWriterTests.cs"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'EventListenerTextWriterTests' class containing IDisposable members does not itself implement IDisposable. Inspect: ListenerWriter."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/EventListenerTextWriterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                }
              }
            },
            {
              "message": {
                "text": "The 'EventListenerTextWriterTests' class containing IDisposable members does not itself implement IDisposable. Inspect: ListenerWriter."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/EventListenerTextWriterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 21,
                  "startColumn": 1,
                  "startLine": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3013",
          "message": {
            "text": "It is odd that the body of 'MatchesAnything' function is fully equivalent to the body of 'PassesAnything' function (28, line 36)."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/Filters/EmptyFilterTests.cs"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "It is odd that the body of 'MatchesAnything' function is fully equivalent to the body of 'PassesAnything' function (28, line 36)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/Filters/EmptyFilterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 28,
                  "startColumn": 1,
                  "startLine": 28
                }
              }
            },
            {
              "message": {
                "text": "It is odd that the body of 'MatchesAnything' function is fully equivalent to the body of 'PassesAnything' function (28, line 36)."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/Filters/EmptyFilterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 36,
                  "startColumn": 1,
                  "startLine": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3056",
          "message": {
            "text": "Consider reviewing the correctness of 'testMethod1' item's usage."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/RandomizerTests.cs"
                },
                "region": {
                  "startLine": 738,
                  "endLine": 738,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "Consider reviewing the correctness of 'testMethod1' item's usage."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/RandomizerTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 737,
                  "startColumn": 1,
                  "startLine": 737
                }
              }
            },
            {
              "message": {
                "text": "Consider reviewing the correctness of 'testMethod1' item's usage."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/RandomizerTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 738,
                  "startColumn": 1,
                  "startLine": 738
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3080",
          "message": {
            "text": "Possible null dereference. Consider inspecting 'messageNode'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/Results/TestResultFailureTests.cs"
                },
                "region": {
                  "startLine": 213,
                  "endLine": 213,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3080",
          "message": {
            "text": "Possible null dereference. Consider inspecting 'stacktraceNode'."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/Results/TestResultFailureTests.cs"
                },
                "region": {
                  "startLine": 226,
                  "endLine": 226,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3055",
          "message": {
            "text": "Suspicious assignment inside the condition expression of 'if' operator: shouldPass = platform.ToLower() == testPlatform.ToLower()."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/PlatformDetectionTests.cs"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/TestMethodSignatureTests.cs"
                },
                "region": {
                  "startLine": 157,
                  "endLine": 157,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'TextMessageWriterTests' class containing IDisposable members does not itself implement IDisposable. Inspect: writer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/TextMessageWriterTests.cs"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'TextMessageWriterTests' class containing IDisposable members does not itself implement IDisposable. Inspect: writer."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/TextMessageWriterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                }
              }
            },
            {
              "message": {
                "text": "The 'TextMessageWriterTests' class containing IDisposable members does not itself implement IDisposable. Inspect: writer."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/TextMessageWriterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3080",
          "message": {
            "text": "Possible null dereference of method return value. Consider inspecting: Dequeue()."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/WorkItemQueueTests.cs"
                },
                "region": {
                  "startLine": 174,
                  "endLine": 174,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Internal/TestXmlTests.cs"
                },
                "region": {
                  "startLine": 166,
                  "endLine": 166,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3001",
          "message": {
            "text": "There are identical sub-expressions '2 + 2' to the left and to the right of the '==' operator."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/Syntax/EqualityTests.cs"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3126",
          "message": {
            "text": "Type 'SimpleIEquatableObj' implementing IEquatable<T> interface does not override 'GetHashCode' method."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/TestUtilities/Collections/SimpleEnumerable.cs"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 84,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3163",
          "message": {
            "text": "An empty exception handler. Silent suppression of exceptions may hide the presence of bugs or vulnerabilities."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/TestUtilities/TestDirectory.cs"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3087",
          "message": {
            "text": "Type of variable enumerated in 'foreach' is not guaranteed to be castable to the type of collection's elements."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/TestUtilities/TestFinder.cs"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'WorkItemTests' class containing IDisposable members does not itself implement IDisposable. Inspect: _workItem."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/WorkItemTests.cs"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'WorkItemTests' class containing IDisposable members does not itself implement IDisposable. Inspect: _workItem."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/WorkItemTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 10,
                  "startColumn": 1,
                  "startLine": 10
                }
              }
            },
            {
              "message": {
                "text": "The 'WorkItemTests' class containing IDisposable members does not itself implement IDisposable. Inspect: _workItem."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/tests/WorkItemTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3032",
          "message": {
            "text": "Waiting on this expression is unreliable, as compiler may optimize some of the variables. Use volatile variable(s) or synchronization primitives to avoid this."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/TestBuilder.cs"
                },
                "region": {
                  "startLine": 172,
                  "endLine": 172,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3072",
          "message": {
            "text": "The 'ExtendedTextWrapperTests' class containing IDisposable members does not itself implement IDisposable. Inspect: writer."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/ExtendedTextWrapperTests.cs"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'ExtendedTextWrapperTests' class containing IDisposable members does not itself implement IDisposable. Inspect: writer."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/ExtendedTextWrapperTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 11,
                  "startColumn": 1,
                  "startLine": 11
                }
              }
            },
            {
              "message": {
                "text": "The 'ExtendedTextWrapperTests' class containing IDisposable members does not itself implement IDisposable. Inspect: writer."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/ExtendedTextWrapperTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3125",
          "message": {
            "text": "The 'doc.FirstChild' object was used after it was verified against null. Check lines: 60, 59."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/NUnit2XmlOutputWriterTests.cs"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'doc.FirstChild' object was used after it was verified against null. Check lines: 60, 59."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/NUnit2XmlOutputWriterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 59,
                  "startColumn": 1,
                  "startLine": 59
                }
              }
            },
            {
              "message": {
                "text": "The 'doc.FirstChild' object was used after it was verified against null. Check lines: 60, 59."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/NUnit2XmlOutputWriterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 60,
                  "startColumn": 1,
                  "startLine": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "V3125",
          "message": {
            "text": "The 'doc.FirstChild' object was used after it was verified against null. Check lines: 60, 59."
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/NUnit3XmlOutputWriterTests.cs"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 1,
                  "endColumn": 2147483647
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "message": {
                "text": "The 'doc.FirstChild' object was used after it was verified against null. Check lines: 60, 59."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/NUnit3XmlOutputWriterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 59,
                  "startColumn": 1,
                  "startLine": 59
                }
              }
            },
            {
              "message": {
                "text": "The 'doc.FirstChild' object was used after it was verified against null. Check lines: 60, 59."
              },
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/msedlyarskiy/benchmark/projects/nunit/src/NUnitFramework/nunitlite.tests/NUnit3XmlOutputWriterTests.cs"
                },
                "region": {
                  "endColumn": 2147483647,
                  "endLine": 60,
                  "startColumn": 1,
                  "startLine": 60
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
