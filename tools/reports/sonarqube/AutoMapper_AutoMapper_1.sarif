{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.0.0.0",
        "fileVersion": "4.0.1-1.22181.2 (487283bc)",
        "semanticVersion": "4.0.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/BuiltInTypes/ConvertUsing.cs",
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/ProjectionOrderTest.cs",
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "endLine": 57,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1829",
          "level": "note",
          "message": "Use the \"Count\" property instead of Enumerable.Count()",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/ProjectionOrderTest.cs",
                "region": {
                  "startLine": 48,
                  "startColumn": 70,
                  "endLine": 48,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "PropertyNameKey": "Count"
            }
          }
        },
        {
          "ruleId": "CA1829",
          "level": "note",
          "message": "Use the \"Count\" property instead of Enumerable.Count()",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/ProjectionOrderTest.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 70,
                  "endLine": 52,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "PropertyNameKey": "Count"
            }
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Check' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/ExplicitExpansion/NestedExplicitExpandWithFields.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 18,
                  "endLine": 59,
                  "endColumn": 23
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Check' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/ExplicitExpansion/NestedExplicitExpand.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 18,
                  "endLine": 59,
                  "endColumn": 23
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1806",
          "level": "note",
          "message": "'Can_map_with_projection' calls 'SequenceEqual' but does not use the value the method returns. Linq methods are known to not have side effects. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/MaxDepth/NavigationPropertySO.cs",
                "region": {
                  "startLine": 86,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Check' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/ExplicitExpansion/ExpandMembersPath.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 18,
                  "endLine": 59,
                  "endColumn": 23
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2208",
          "level": "note",
          "message": "Call the ArgumentNullException constructor that contains a message and/or paramName parameter",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/Inheritance/ProjectToAbstractType.cs",
                "region": {
                  "startLine": 233,
                  "startColumn": 23,
                  "endLine": 233,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2208",
          "level": "note",
          "message": "Call the ArgumentNullException constructor that contains a message and/or paramName parameter",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/Inheritance/ProjectToAbstractType.cs",
                "region": {
                  "startLine": 187,
                  "startColumn": 40,
                  "endLine": 187,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2208",
          "level": "note",
          "message": "Call the ArgumentNullException constructor that contains a message and/or paramName parameter",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/Inheritance/ProjectToAbstractType.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 42,
                  "endLine": 188,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2208",
          "level": "note",
          "message": "Call the ArgumentException constructor that contains a message and/or paramName parameter",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/AutoMapper/src/IntegrationTests/Inheritance/ProjectToAbstractType.cs",
                "region": {
                  "startLine": 161,
                  "startColumn": 52,
                  "endLine": 161,
                  "endColumn": 75
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "CA1806": {
          "id": "CA1806",
          "shortDescription": "Do not ignore method results",
          "fullDescription": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1806",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1822": {
          "id": "CA1822",
          "shortDescription": "Mark members as static",
          "fullDescription": "Members that do not access instance data or call instance methods can be marked as static. After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. This can give you a measurable performance gain for performance-sensitive code.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1822",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1829": {
          "id": "CA1829",
          "shortDescription": "Use Length/Count property instead of Count() when available",
          "fullDescription": "Enumerable.Count() potentially enumerates the sequence while a Length/Count property is a direct access.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1829",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA2208": {
          "id": "CA2208",
          "shortDescription": "Instantiate argument exceptions correctly",
          "fullDescription": "A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2208",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "S2699": {
          "id": "S2699",
          "shortDescription": "Tests should include assertions",
          "fullDescription": "A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the code under test.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2699",
          "properties": {
            "category": "Blocker Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        }
      }
    }
  ]
}