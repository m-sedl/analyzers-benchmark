{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.0.0.0",
        "fileVersion": "4.0.1-1.22181.2 (487283bc)",
        "semanticVersion": "4.0.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "S125",
          "level": "warning",
          "message": "Remove this commented out code.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/HttpBasicAuthenticator.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 5,
                  "endLine": 36,
                  "endColumn": 16
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1104",
          "level": "warning",
          "message": "Make this field 'private' and encapsulate it in a 'public' property.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/NameValuePair.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 33,
                  "endLine": 19,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2223",
          "level": "warning",
          "message": "Change the visibility of 'Empty' or make it 'const' or 'readonly'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/NameValuePair.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 33,
                  "endLine": 19,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S4136",
          "level": "warning",
          "message": "All 'Add' method overloads should be adjacent.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/WebPairCollection.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 17,
                  "endLine": 26,
                  "endColumn": 20
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/WebPairCollection.cs",
                "region": {
                  "startLine": 30,
                  "startColumn": 17,
                  "endLine": 30,
                  "endColumn": 20
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Non-adjacent overload"
            }
          }
        },
        {
          "ruleId": "S3881",
          "level": "warning",
          "message": "Fix this implementation of 'IDisposable' to conform to the dispose pattern.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RequestContent.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "endLine": 26,
                  "endColumn": 21
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RequestContent.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "endLine": 26,
                  "endColumn": 21
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RequestContent.cs",
                "region": {
                  "startLine": 220,
                  "startColumn": 17,
                  "endLine": 220,
                  "endColumn": 24
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Provide 'protected' overridable implementation of 'Dispose(bool)' on 'RequestContent' or mark the type as 'sealed'.",
              "1": "'RequestContent.Dispose()' should call 'Dispose(true)' and 'GC.SuppressFinalize(this)'."
            }
          }
        },
        {
          "ruleId": "S4136",
          "level": "warning",
          "message": "All 'AddParameter' method overloads should be adjacent.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RestRequestExtensions.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 31,
                  "endLine": 33,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RestRequestExtensions.cs",
                "region": {
                  "startLine": 206,
                  "startColumn": 31,
                  "endLine": 206,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Non-adjacent overload"
            }
          }
        },
        {
          "ruleId": "S4136",
          "level": "warning",
          "message": "All 'AddOrUpdateParameter' method overloads should be adjacent.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RestRequestExtensions.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 31,
                  "endLine": 55,
                  "endColumn": 51
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RestRequestExtensions.cs",
                "region": {
                  "startLine": 228,
                  "startColumn": 31,
                  "endLine": 228,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Non-adjacent overload"
            }
          }
        },
        {
          "ruleId": "S3887",
          "level": "warning",
          "message": "Use an immutable collection or reduce the accessibility of the non-private readonly field 'FromDataFormat'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Serializers/ContentType.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 28,
                  "endLine": 26,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2386",
          "level": "warning",
          "message": "Use an immutable collection or reduce the accessibility of the public static field 'FromDataFormat'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Serializers/ContentType.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 28,
                  "endLine": 26,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3925",
          "level": "warning",
          "message": "Update this implementation of 'ISerializable' to conform to the recommended serialization pattern.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Serializers/DeseralizationException.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 14,
                  "endLine": 18,
                  "endColumn": 38
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Serializers/DeseralizationException.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 8,
                  "endLine": 18,
                  "endColumn": 13
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Serializers/DeseralizationException.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 8,
                  "endLine": 18,
                  "endColumn": 13
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Add 'System.SerializableAttribute' attribute on 'DeserializationException' because it implements 'ISerializable'.",
              "1": "Add a 'protected' constructor 'DeserializationException(SerializationInfo, StreamingContext)'."
            }
          }
        },
        {
          "ruleId": "S4136",
          "level": "warning",
          "message": "All 'PostAsync' method overloads should be adjacent.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClientExtensions.cs",
                "region": {
                  "startLine": 180,
                  "startColumn": 34,
                  "endLine": 180,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClientExtensions.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 44,
                  "endLine": 188,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Non-adjacent overload"
            }
          }
        },
        {
          "ruleId": "S4136",
          "level": "warning",
          "message": "All 'UseSerializer' method overloads should be adjacent.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 32,
                  "startColumn": 23,
                  "endLine": 32,
                  "endColumn": 36
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 23,
                  "endLine": 52,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Non-adjacent overload"
            }
          }
        },
        {
          "ruleId": "S927",
          "level": "warning",
          "message": "Rename parameter 'parametersArray' to 'array' to match the interface declaration.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/WebPairCollection.cs",
                "region": {
                  "startLine": 42,
                  "startColumn": 34,
                  "endLine": 42,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3928",
          "level": "warning",
          "message": "The parameter name 'Type' is not declared in the argument list.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuth1Authenticator.cs",
                "region": {
                  "startLine": 236,
                  "startColumn": 53,
                  "endLine": 236,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3928",
          "level": "warning",
          "message": "The parameter name 'ParameterHandling' is not declared in the argument list.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuth1Authenticator.cs",
                "region": {
                  "startLine": 245,
                  "startColumn": 23,
                  "endLine": 245,
                  "endColumn": 81
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2245",
          "level": "warning",
          "message": "Make sure that using this pseudorandom number generator is safe here.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuthTools.cs",
                "region": {
                  "startLine": 46,
                  "startColumn": 18,
                  "endLine": 46,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3963",
          "level": "warning",
          "message": "Initialize all 'static fields' inline and remove the 'static constructor'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuthTools.cs",
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "endLine": 47,
                  "endColumn": 6
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S112",
          "level": "warning",
          "message": "'System.ApplicationException' should not be thrown by user code.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuth1Authenticator.cs",
                "region": {
                  "startLine": 197,
                  "startColumn": 19,
                  "endLine": 199,
                  "endColumn": 14
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S4790",
          "level": "warning",
          "message": "Make sure this weak hash algorithm is not used in a sensitive context here.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuthTools.cs",
                "region": {
                  "startLine": 234,
                  "startColumn": 44,
                  "endLine": 234,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S4790",
          "level": "warning",
          "message": "Make sure this weak hash algorithm is not used in a sensitive context here.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuthTools.cs",
                "region": {
                  "startLine": 252,
                  "startColumn": 26,
                  "endLine": 252,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S927",
          "level": "warning",
          "message": "Rename parameter 'function' to 'd' to match the base class declaration.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Sync/AsyncHelpers.cs",
                "region": {
                  "startLine": 73,
                  "startColumn": 58,
                  "endLine": 73,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1075",
          "level": "warning",
          "message": "Remove this hardcoded path-delimiter.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/UriExtensions.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 127,
                  "endLine": 33,
                  "endColumn": 130
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S927",
          "level": "warning",
          "message": "Rename parameter 'function' to 'd' to match the base class declaration.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Sync/AsyncHelpers.cs",
                "region": {
                  "startLine": 116,
                  "startColumn": 58,
                  "endLine": 116,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3928",
          "level": "warning",
          "message": "The parameter name 'ResponseStatus' is not declared in the argument list.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Response/RestResponseBase.cs",
                "region": {
                  "startLine": 147,
                  "startColumn": 65,
                  "endLine": 147,
                  "endColumn": 120
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S4457",
          "level": "warning",
          "message": "Split this method into two, one handling parameters check and the other handling the asynchronous code.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClientExtensions.cs",
                "region": {
                  "startLine": 101,
                  "startColumn": 47,
                  "endLine": 101,
                  "endColumn": 59
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClientExtensions.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 19,
                  "endLine": 107,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S927",
          "level": "warning",
          "message": "Rename parameter 'bodyParameter' to 'parameter' to match the interface declaration.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Serializers/Json/SystemTextJsonSerializer.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 40,
                  "endLine": 35,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3358",
          "level": "warning",
          "message": "Extract this nested ternary operation into an independent statement.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Async.cs",
                "region": {
                  "startLine": 122,
                  "startColumn": 15,
                  "endLine": 122,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3928",
          "level": "warning",
          "message": "Use a constructor overloads that allows a more meaningful exception message to be provided.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Async.cs",
                "region": {
                  "startLine": 149,
                  "startColumn": 36,
                  "endLine": 149,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3928",
          "level": "warning",
          "message": "The parameter name 'CookieContainer' is not declared in the argument list.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.cs",
                "region": {
                  "startLine": 101,
                  "startColumn": 19,
                  "endLine": 101,
                  "endColumn": 143
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3358",
          "level": "warning",
          "message": "Extract this nested ternary operation into an independent statement.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RestRequestExtensions.cs",
                "region": {
                  "startLine": 343,
                  "startColumn": 13,
                  "endLine": 346,
                  "endColumn": 139
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3358",
          "level": "warning",
          "message": "Extract this nested ternary operation into an independent statement.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RestRequestExtensions.cs",
                "region": {
                  "startLine": 344,
                  "startColumn": 13,
                  "endLine": 346,
                  "endColumn": 139
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3358",
          "level": "warning",
          "message": "Extract this nested ternary operation into an independent statement.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Request/RestRequestExtensions.cs",
                "region": {
                  "startLine": 345,
                  "startColumn": 13,
                  "endLine": 346,
                  "endColumn": 139
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3928",
          "level": "warning",
          "message": "Use a constructor overloads that allows a more meaningful exception message to be provided.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 68,
                  "endLine": 59,
                  "endColumn": 101
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3776",
          "level": "warning",
          "message": "Refactor this method to reduce its Cognitive Complexity from 16 to the 15 allowed.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 61,
                  "endLine": 21,
                  "endColumn": 74
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 28,
                  "startColumn": 9,
                  "endLine": 28,
                  "endColumn": 16
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 31,
                  "startColumn": 13,
                  "endLine": 31,
                  "endColumn": 15
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "endLine": 33,
                  "endColumn": 15
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 13,
                  "endLine": 35,
                  "endColumn": 17
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 77,
                  "endLine": 39,
                  "endColumn": 78
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 15
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 34,
                  "endLine": 50,
                  "endColumn": 36
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 34,
                  "endLine": 56,
                  "endColumn": 40
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 75,
                  "startColumn": 47,
                  "endLine": 75,
                  "endColumn": 49
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Parameters/ObjectParser.cs",
                "region": {
                  "startLine": 75,
                  "startColumn": 80,
                  "endLine": 75,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "+1",
              "1": "+2 (incl 1 for nesting)",
              "2": "+2 (incl 1 for nesting)",
              "3": "+1",
              "4": "+2 (incl 1 for nesting)",
              "5": "+2 (incl 1 for nesting)",
              "6": "+1",
              "7": "+3 (incl 2 for nesting)",
              "8": "+1",
              "9": "+1"
            }
          }
        },
        {
          "ruleId": "S3776",
          "level": "warning",
          "message": "Refactor this method to reduce its Cognitive Complexity from 21 to the 15 allowed.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 54,
                  "startColumn": 30,
                  "endLine": 54,
                  "endColumn": 41
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 63,
                  "startColumn": 13,
                  "endLine": 63,
                  "endColumn": 15
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 68,
                  "startColumn": 17,
                  "endLine": 68,
                  "endColumn": 19
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 68,
                  "startColumn": 53,
                  "endLine": 68,
                  "endColumn": 55
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 69,
                  "startColumn": 21,
                  "endLine": 69,
                  "endColumn": 23
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 71,
                  "startColumn": 21,
                  "endLine": 71,
                  "endColumn": 23
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 71,
                  "startColumn": 63,
                  "endLine": 71,
                  "endColumn": 65
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 75,
                  "startColumn": 17,
                  "endLine": 75,
                  "endColumn": 19
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 78,
                  "startColumn": 9,
                  "endLine": 78,
                  "endColumn": 14
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 79,
                  "startColumn": 13,
                  "endLine": 79,
                  "endColumn": 15
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 81,
                  "startColumn": 13,
                  "endLine": 81,
                  "endColumn": 15
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 81,
                  "startColumn": 52,
                  "endLine": 81,
                  "endColumn": 54
                }
              }
            },
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 86,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 15
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "+1",
              "1": "+2 (incl 1 for nesting)",
              "10": "+1",
              "11": "+2 (incl 1 for nesting)",
              "2": "+1",
              "3": "+3 (incl 2 for nesting)",
              "4": "+3 (incl 2 for nesting)",
              "5": "+1",
              "6": "+2 (incl 1 for nesting)",
              "7": "+1",
              "8": "+2 (incl 1 for nesting)",
              "9": "+2 (incl 1 for nesting)"
            }
          }
        },
        {
          "ruleId": "S3358",
          "level": "warning",
          "message": "Extract this nested ternary operation into an independent statement.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/RestClient.Serialization.cs",
                "region": {
                  "startLine": 104,
                  "startColumn": 19,
                  "endLine": 104,
                  "endColumn": 113
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "AD0001",
          "level": "warning",
          "message": "Analyzer 'SonarAnalyzer.Rules.CSharp.CryptographicKeyShouldNotBeTooShort' threw an exception of type 'System.NullReferenceException' with message 'Object reference not set to an instance of an object.'.\u000aException occurred with following context:\u000aCompilation: RestSharp\u000aSyntaxTree: /home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuthTools.cs\u000aSyntaxNode: new RSACryptoServiceProvider { PersistKeyInCsp ... [ObjectCreationExpressionSyntax]@[11045..11101) (247,33)-(247,89)\u000a\u000aSystem.NullReferenceException: Object reference not set to an instance of an object.\u000a   at SonarAnalyzer.Rules.CSharp.CryptographicKeyShouldNotBeTooShort.CheckSystemSecurityCryptographyAlgorithms(ITypeSymbol containingType, IObjectCreation objectCreation, SyntaxNodeAnalysisContext c)\u000a   at SonarAnalyzer.Rules.CSharp.CryptographicKeyShouldNotBeTooShort.<Initialize>b__13_1(SyntaxNodeAnalysisContext c)\u000a   at SonarAnalyzer.Helpers.DiagnosticAnalyzerContextHelper.<>c__DisplayClass1_0`1.<RegisterSyntaxNodeActionInNonGenerated>b__0(SyntaxNodeAnalysisContext c)\u000a   at SonarAnalyzer.Helpers.SonarAnalysisContext.<>c__DisplayClass47_0`1.<RegisterContextAction>b__0(TContext c)\u000a   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__62`1.<ExecuteSyntaxNodeAction>b__62_0(ValueTuple`2 data)\u000a   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\u000a-----\u000a\u000aSuppress the following diagnostics to disable this analyzer: S4426",
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "AD0001": {
          "id": "AD0001",
          "shortDescription": "Analyzer Failure",
          "fullDescription": "Analyzer 'SonarAnalyzer.Rules.CSharp.CryptographicKeyShouldNotBeTooShort' threw the following exception:\u000a'Exception occurred with following context:\u000aCompilation: RestSharp\u000aSyntaxTree: /home/msedlyarskiy/benchmark/projects/RestSharp/src/RestSharp/Authenticators/OAuth/OAuthTools.cs\u000aSyntaxNode: new RSACryptoServiceProvider { PersistKeyInCsp ... [ObjectCreationExpressionSyntax]@[11045..11101) (247,33)-(247,89)\u000a\u000aSystem.NullReferenceException: Object reference not set to an instance of an object.\u000a   at SonarAnalyzer.Rules.CSharp.CryptographicKeyShouldNotBeTooShort.CheckSystemSecurityCryptographyAlgorithms(ITypeSymbol containingType, IObjectCreation objectCreation, SyntaxNodeAnalysisContext c)\u000a   at SonarAnalyzer.Rules.CSharp.CryptographicKeyShouldNotBeTooShort.<Initialize>b__13_1(SyntaxNodeAnalysisContext c)\u000a   at SonarAnalyzer.Helpers.DiagnosticAnalyzerContextHelper.<>c__DisplayClass1_0`1.<RegisterSyntaxNodeActionInNonGenerated>b__0(SyntaxNodeAnalysisContext c)\u000a   at SonarAnalyzer.Helpers.SonarAnalysisContext.<>c__DisplayClass47_0`1.<RegisterContextAction>b__0(TContext c)\u000a   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.<>c__62`1.<ExecuteSyntaxNodeAction>b__62_0(ValueTuple`2 data)\u000a   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)\u000a-----\u000a'.",
          "defaultLevel": "warning",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "AnalyzerException"
            ]
          }
        },
        "S1075": {
          "id": "S1075",
          "shortDescription": "URIs should not be hardcoded",
          "fullDescription": "Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems usually differ from the development environment, …​etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by customizable parameter.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1075",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S1104": {
          "id": "S1104",
          "shortDescription": "Fields should not have public accessibility",
          "fullDescription": "Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1104",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S112": {
          "id": "S112",
          "shortDescription": "General exceptions should never be thrown",
          "fullDescription": "Throwing such general exceptions as Exception, SystemException, ApplicationException, IndexOutOfRangeException, NullReferenceException, OutOfMemoryException and ExecutionEngineException prevents calling methods from handling true, system-generated exceptions differently than application-generated errors.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-112",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S125": {
          "id": "S125",
          "shortDescription": "Sections of code should not be commented out",
          "fullDescription": "Programmers should not comment out code as it bloats programs and reduces readability.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-125",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S2223": {
          "id": "S2223",
          "shortDescription": "Non-constant static fields should not be visible",
          "fullDescription": "A static field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads needs synchronization with locks. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best suited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked readonly or converted to constants.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2223",
          "properties": {
            "category": "Critical Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S2245": {
          "id": "S2245",
          "shortDescription": "Using pseudorandom number generators (PRNGs) is security-sensitive",
          "fullDescription": "Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2245",
          "properties": {
            "category": "Critical Security Hotspot",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S2386": {
          "id": "S2386",
          "shortDescription": "Mutable fields should not be \"public static\"",
          "fullDescription": "public static mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by reducing the accessibility of the field or by changing the return type to an immutable type.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2386",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3358": {
          "id": "S3358",
          "shortDescription": "Ternary operators should not be nested",
          "fullDescription": "Just because you can do something, doesn’t mean you should, and that’s the case with nested ternary operations. Nesting ternary operators results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you) scratching their heads and cursing.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3358",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3776": {
          "id": "S3776",
          "shortDescription": "Cognitive Complexity of methods should not be too high",
          "fullDescription": "Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be difficult to maintain.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3776",
          "properties": {
            "category": "Critical Code Smell",
            "isEnabledByDefault": false,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3881": {
          "id": "S3881",
          "shortDescription": "\"IDisposable\" should be implemented correctly",
          "fullDescription": "The IDisposable interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource leaks or more severe bugs.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3881",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3887": {
          "id": "S3887",
          "shortDescription": "Mutable, non-private fields should not be \"readonly\"",
          "fullDescription": "Using the readonly keyword on a field means that it can’t be changed after initialization. However, when applied to collections or arrays, that’s only partly true. readonly enforces that another instance can’t be assigned to the field, but it cannot keep the contents from being updated. That means that in practice, the field value really can be changed, and the use of readonly on such a field is misleading, and you’re likely to not be getting the behavior you expect.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3887",
          "properties": {
            "category": "Minor Bug",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3925": {
          "id": "S3925",
          "shortDescription": "\"ISerializable\" should be implemented correctly",
          "fullDescription": "The ISerializable interface is the mechanism to control the type serialization process. If not implemented correctly this could result in an invalid serialization and hard to detect bugs.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3925",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3928": {
          "id": "S3928",
          "shortDescription": "Parameter names used into ArgumentException constructors should match an existing one ",
          "fullDescription": "Some constructors of the ArgumentException, ArgumentNullException, ArgumentOutOfRangeException and DuplicateWaitObjectException classes must be fed with a valid parameter name. This rule raises an issue in two cases:",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3928",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3963": {
          "id": "S3963",
          "shortDescription": "\"static\" fields should be initialized inline",
          "fullDescription": "When a static constructor serves no other purpose that initializing static fields, it comes with an unnecessary performance cost because the compiler generates a check before each static method or instance constructor invocation.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3963",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S4136": {
          "id": "S4136",
          "shortDescription": "Method overloads should be grouped together",
          "fullDescription": "For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current available options.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-4136",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S4457": {
          "id": "S4457",
          "shortDescription": "Parameter validation in \"async\"/\"await\" methods should be wrapped",
          "fullDescription": "Because of the way async/await methods are rewritten by the compiler, any exceptions thrown during the parameters check will happen only when the task is observed. That could happen far away from the source of the buggy code or never happen for fire-and-forget tasks.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-4457",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S4790": {
          "id": "S4790",
          "shortDescription": "Using weak hashing algorithms is security-sensitive",
          "fullDescription": "Cryptographic hash algorithms such as MD2, MD4, MD5, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160 and SHA-1 are no longer considered secure, because it is possible to have collisions (little computational effort is enough to find two or more different inputs that produce the same hash).",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-4790",
          "properties": {
            "category": "Critical Security Hotspot",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S927": {
          "id": "S927",
          "shortDescription": "Parameter names should match base declaration and other partial definitions",
          "fullDescription": "The name of a parameter in an externally visible. This rule raises an issue when method override does not match the name of the parameter in the base declaration of the method, or the name of the parameter in the interface declaration of the method or the name of any other partial definition.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-927",
          "properties": {
            "category": "Critical Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        }
      }
    }
  ]
}