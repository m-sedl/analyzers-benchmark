{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.4.0.0",
        "fileVersion": "4.4.0-2.22426.8 (7886fad5)",
        "semanticVersion": "4.4.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "CS0472",
          "level": "warning",
          "message": "The result of the expression is always 'false' since a value of type 'bool' is never equal to 'null' of type 'bool?'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SpatialQueryTestBase.cs",
                "region": {
                  "startLine": 1230,
                  "startColumn": 52,
                  "endLine": 1230,
                  "endColumn": 75
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0472",
          "level": "warning",
          "message": "The result of the expression is always 'true' since a value of type 'bool' is never equal to 'null' of type 'bool?'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SpatialQueryTestBase.cs",
                "region": {
                  "startLine": 1242,
                  "startColumn": 52,
                  "endLine": 1242,
                  "endColumn": 75
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0472",
          "level": "warning",
          "message": "The result of the expression is always 'false' since a value of type 'bool' is never equal to 'null' of type 'bool?'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SpatialQueryTestBase.cs",
                "region": {
                  "startLine": 1256,
                  "startColumn": 57,
                  "endLine": 1256,
                  "endColumn": 100
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0472",
          "level": "warning",
          "message": "The result of the expression is always 'false' since a value of type 'bool' is never equal to 'null' of type 'bool?'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SpatialQueryTestBase.cs",
                "region": {
                  "startLine": 1263,
                  "startColumn": 57,
                  "endLine": 1263,
                  "endColumn": 100
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0472",
          "level": "warning",
          "message": "The result of the expression is always 'true' since a value of type 'bool' is never equal to 'null' of type 'bool?'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SpatialQueryTestBase.cs",
                "region": {
                  "startLine": 1277,
                  "startColumn": 57,
                  "endLine": 1277,
                  "endColumn": 100
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0472",
          "level": "warning",
          "message": "The result of the expression is always 'true' since a value of type 'bool' is never equal to 'null' of type 'bool?'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SpatialQueryTestBase.cs",
                "region": {
                  "startLine": 1284,
                  "startColumn": 57,
                  "endLine": 1284,
                  "endColumn": 100
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0184",
          "level": "warning",
          "message": "The given expression is never of the provided ('Order') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindWhereQueryTestBase.cs",
                "region": {
                  "startLine": 1742,
                  "startColumn": 47,
                  "endLine": 1742,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1718",
          "level": "warning",
          "message": "Comparison made to same variable; did you mean to compare something else?",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindMiscellaneousQueryTestBase.cs",
                "region": {
                  "startLine": 302,
                  "startColumn": 25,
                  "endLine": 302,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 3
          }
        },
        {
          "ruleId": "CS0458",
          "level": "warning",
          "message": "The result of the expression is always 'null' of type 'AmmunitionType?'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/GearsOfWarQueryTestBase.cs",
                "region": {
                  "startLine": 514,
                  "startColumn": 48,
                  "endLine": 514,
                  "endColumn": 71
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0649",
          "level": "warning",
          "message": "Field 'WithConstructorsTestBase<TFixture>.LazyFieldBlog._loader' is never assigned to, and will always have its default value null",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/WithConstructorsTestBase.cs",
                "region": {
                  "startLine": 1131,
                  "startColumn": 29,
                  "endLine": 1131,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 4
          }
        },
        {
          "ruleId": "CS0649",
          "level": "warning",
          "message": "Field 'WithConstructorsTestBase<TFixture>.LazyFieldPost._loader' is never assigned to, and will always have its default value null",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/WithConstructorsTestBase.cs",
                "region": {
                  "startLine": 1152,
                  "startColumn": 29,
                  "endLine": 1152,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 4
          }
        },
        {
          "ruleId": "CS0169",
          "level": "warning",
          "message": "The field 'DataAnnotationTestBase<TFixture>.FieldAnnotationClass._personFirstName' is never used",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/DataAnnotationTestBase.cs",
                "region": {
                  "startLine": 200,
                  "startColumn": 33,
                  "endLine": 200,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 3
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConcurrencyDetectorTestBase.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 25,
                  "endLine": 24,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConcurrencyDetectorTestBase.cs",
                "region": {
                  "startLine": 29,
                  "startColumn": 25,
                  "endLine": 29,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConcurrencyDetectorTestBase.cs",
                "region": {
                  "startLine": 34,
                  "startColumn": 25,
                  "endLine": 34,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConcurrencyDetectorTestBase.cs",
                "region": {
                  "startLine": 42,
                  "startColumn": 25,
                  "endLine": 42,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConcurrencyDetectorTestBase.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 25,
                  "endLine": 50,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConcurrencyDetectorTestBase.cs",
                "region": {
                  "startLine": 58,
                  "startColumn": 25,
                  "endLine": 58,
                  "endColumn": 28
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConcurrencyDetectorTestBase.cs",
                "region": {
                  "startLine": 66,
                  "startColumn": 25,
                  "endLine": 66,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/DataAnnotationTestBase.cs",
                "region": {
                  "startLine": 1737,
                  "startColumn": 25,
                  "endLine": 1737,
                  "endColumn": 93
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConferencePlannerTestBase.cs",
                "region": {
                  "startLine": 837,
                  "startColumn": 60,
                  "endLine": 837,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConferencePlannerTestBase.cs",
                "region": {
                  "startLine": 838,
                  "startColumn": 50,
                  "endLine": 838,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/ConferencePlannerTestBase.cs",
                "region": {
                  "startLine": 839,
                  "startColumn": 50,
                  "endLine": 839,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'FindAsync' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/FindTestBase.cs",
                "region": {
                  "startLine": 862,
                  "startColumn": 62,
                  "endLine": 862,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'FindAsync' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/FindTestBase.cs",
                "region": {
                  "startLine": 864,
                  "startColumn": 61,
                  "endLine": 864,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'FindAsync' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/FindTestBase.cs",
                "region": {
                  "startLine": 841,
                  "startColumn": 47,
                  "endLine": 842,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'FindAsync' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/FindTestBase.cs",
                "region": {
                  "startLine": 843,
                  "startColumn": 46,
                  "endLine": 843,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/LazyLoadProxyTestBase.cs",
                "region": {
                  "startLine": 2535,
                  "startColumn": 31,
                  "endLine": 2535,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/OwnedEntityQueryTestBase.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 31,
                  "endLine": 15,
                  "endColumn": 90
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/OwnedEntityQueryTestBase.cs",
                "region": {
                  "startLine": 97,
                  "startColumn": 31,
                  "endLine": 97,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/OwnedEntityQueryTestBase.cs",
                "region": {
                  "startLine": 151,
                  "startColumn": 31,
                  "endLine": 151,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/SpatialTestBase.cs",
                "region": {
                  "startLine": 97,
                  "startColumn": 25,
                  "endLine": 97,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 195,
                  "startColumn": 31,
                  "endLine": 195,
                  "endColumn": 86
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 174,
                  "startColumn": 31,
                  "endLine": 174,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 495,
                  "startColumn": 31,
                  "endLine": 495,
                  "endColumn": 106
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 520,
                  "startColumn": 31,
                  "endLine": 520,
                  "endColumn": 108
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 545,
                  "startColumn": 31,
                  "endLine": 545,
                  "endColumn": 108
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 615,
                  "startColumn": 31,
                  "endLine": 615,
                  "endColumn": 70
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 661,
                  "startColumn": 31,
                  "endLine": 661,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 879,
                  "startColumn": 31,
                  "endLine": 879,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 899,
                  "startColumn": 31,
                  "endLine": 899,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 941,
                  "startColumn": 31,
                  "endLine": 941,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 968,
                  "startColumn": 31,
                  "endLine": 968,
                  "endColumn": 101
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 1191,
                  "startColumn": 25,
                  "endLine": 1191,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/SimpleQueryTestBase.cs",
                "region": {
                  "startLine": 1261,
                  "startColumn": 31,
                  "endLine": 1261,
                  "endColumn": 104
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1854",
          "level": "note",
          "message": "Prefer a 'TryGetValue' call over a Dictionary indexer access guarded by a 'ContainsKey' check to avoid double lookup",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/TestUtilities/QueryTestGeneration/ProceduralQueryExpressionGenerator.cs",
                "region": {
                  "startLine": 289,
                  "startColumn": 13,
                  "endLine": 289,
                  "endColumn": 53
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/TestUtilities/QueryTestGeneration/ProceduralQueryExpressionGenerator.cs",
                "region": {
                  "startLine": 291,
                  "startColumn": 13,
                  "endLine": 291,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1854",
          "level": "note",
          "message": "Prefer a 'TryGetValue' call over a Dictionary indexer access guarded by a 'ContainsKey' check to avoid double lookup",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/TestUtilities/QueryTestGeneration/ProceduralQueryExpressionGenerator.cs",
                "region": {
                  "startLine": 360,
                  "startColumn": 21,
                  "endLine": 360,
                  "endColumn": 67
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/TestUtilities/QueryTestGeneration/ProceduralQueryExpressionGenerator.cs",
                "region": {
                  "startLine": 361,
                  "startColumn": 24,
                  "endLine": 361,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindFunctionsQueryTestBase.cs",
                "region": {
                  "startLine": 104,
                  "startColumn": 72,
                  "endLine": 104,
                  "endColumn": 75
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindMiscellaneousQueryTestBase.cs",
                "region": {
                  "startLine": 2960,
                  "startColumn": 25,
                  "endLine": 2960,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "SYSLIB1045",
          "level": "note",
          "message": "Use 'GeneratedRegexAttribute' to generate the regular expression implementation at compile-time.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindFunctionsQueryTestBase.cs",
                "region": {
                  "startLine": 1899,
                  "startColumn": 49,
                  "endLine": 1899,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindDbFunctionsQueryTestBase.cs",
                "region": {
                  "startLine": 25,
                  "startColumn": 41,
                  "endLine": 25,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindDbFunctionsQueryTestBase.cs",
                "region": {
                  "startLine": 25,
                  "startColumn": 72,
                  "endLine": 25,
                  "endColumn": 75
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindDbFunctionsQueryTestBase.cs",
                "region": {
                  "startLine": 45,
                  "startColumn": 41,
                  "endLine": 45,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindEFPropertyIncludeQueryTestBase.cs",
                "region": {
                  "startLine": 188,
                  "startColumn": 52,
                  "endLine": 188,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindDbFunctionsQueryTestBase.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 33,
                  "endLine": 55,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindDbFunctionsQueryTestBase.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 56,
                  "endLine": 55,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindDbFunctionsQueryTestBase.cs",
                "region": {
                  "startLine": 65,
                  "startColumn": 31,
                  "endLine": 65,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindCompiledQueryTestBase.cs",
                "region": {
                  "startLine": 203,
                  "startColumn": 25,
                  "endLine": 203,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindCompiledQueryTestBase.cs",
                "region": {
                  "startLine": 461,
                  "startColumn": 31,
                  "endLine": 461,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/NorthwindMiscellaneousQueryTestBase.cs",
                "region": {
                  "startLine": 5421,
                  "startColumn": 31,
                  "endLine": 5421,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ManyToManyQueryTestBase.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 85,
                  "endLine": 21,
                  "endColumn": 88
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ManyToManyQueryTestBase.cs",
                "region": {
                  "startLine": 29,
                  "startColumn": 100,
                  "endLine": 29,
                  "endColumn": 103
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ManyToManyQueryTestBase.cs",
                "region": {
                  "startLine": 37,
                  "startColumn": 91,
                  "endLine": 37,
                  "endColumn": 94
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ManyToManyQueryTestBase.cs",
                "region": {
                  "startLine": 794,
                  "startColumn": 99,
                  "endLine": 794,
                  "endColumn": 102
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1847",
          "level": "note",
          "message": "Use 'string.Contains(char)' instead of 'string.Contains(string)' when searching for a single character",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ManyToManyQueryTestBase.cs",
                "region": {
                  "startLine": 802,
                  "startColumn": 105,
                  "endLine": 802,
                  "endColumn": 108
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2248",
          "level": "note",
          "message": "The argument type, 'Nullable', must be the same as the enum type 'MilitaryRank'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/GearsOfWarQueryTestBase.cs",
                "region": {
                  "startLine": 590,
                  "startColumn": 45,
                  "endLine": 590,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2248",
          "level": "note",
          "message": "The argument type, 'Nullable', must be the same as the enum type 'MilitaryRank'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/GearsOfWarQueryTestBase.cs",
                "region": {
                  "startLine": 658,
                  "startColumn": 45,
                  "endLine": 658,
                  "endColumn": 70
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2795,
                  "startColumn": 31,
                  "endLine": 2795,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2809,
                  "startColumn": 31,
                  "endLine": 2809,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2825,
                  "startColumn": 31,
                  "endLine": 2825,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2851,
                  "startColumn": 31,
                  "endLine": 2851,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2862,
                  "startColumn": 31,
                  "endLine": 2862,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2877,
                  "startColumn": 31,
                  "endLine": 2877,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2907,
                  "startColumn": 31,
                  "endLine": 2907,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2920,
                  "startColumn": 31,
                  "endLine": 2920,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2944,
                  "startColumn": 31,
                  "endLine": 2944,
                  "endColumn": 73
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/efcore/test/EFCore.Specification.Tests/Query/ComplexNavigationsQueryTestBase.cs",
                "region": {
                  "startLine": 2966,
                  "startColumn": 31,
                  "endLine": 2966,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "CA1847": {
          "id": "CA1847",
          "shortDescription": "Use char literal for a single character lookup",
          "fullDescription": "'string.Contains(char)' is available as a better performing overload for single char lookup.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1847",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1854": {
          "id": "CA1854",
          "shortDescription": "Prefer the 'IDictionary.TryGetValue(TKey, out TValue)' method",
          "fullDescription": "Prefer a 'TryGetValue' call over a Dictionary indexer access guarded by a 'ContainsKey' check. 'ContainsKey' and the indexer both would lookup the key under the hood, so using 'TryGetValue' removes the extra lookup.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1854",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA2016": {
          "id": "CA2016",
          "shortDescription": "Forward the 'CancellationToken' parameter to methods",
          "fullDescription": "Forward the 'CancellationToken' parameter to methods to ensure the operation cancellation notifications gets properly propagated, or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2016",
          "properties": {
            "category": "Reliability",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA2248": {
          "id": "CA2248",
          "shortDescription": "Provide correct 'enum' argument to 'Enum.HasFlag'",
          "fullDescription": "'Enum.HasFlag' method expects the 'enum' argument to be of the same 'enum' type as the instance on which the method is invoked and that this 'enum' is marked with 'System.FlagsAttribute'. If these are different 'enum' types, an unhandled exception will be thrown at runtime. If the 'enum' type is not marked with 'System.FlagsAttribute' the call will always return 'false' at runtime.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2248",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CS0169": {
          "id": "CS0169",
          "shortDescription": "Field is never used",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0169)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS0184": {
          "id": "CS0184",
          "shortDescription": "'is' expression's given expression is never of the provided type",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0184)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS0458": {
          "id": "CS0458",
          "shortDescription": "The result of the expression is always 'null'",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0458)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS0472": {
          "id": "CS0472",
          "shortDescription": "The result of the expression is always the same since a value of this type is never equal to 'null'",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0472)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS0649": {
          "id": "CS0649",
          "shortDescription": "Field is never assigned to, and will always have its default value",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0649)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS1718": {
          "id": "CS1718",
          "shortDescription": "Comparison made to same variable",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS1718)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "S2699": {
          "id": "S2699",
          "shortDescription": "Tests should include assertions",
          "fullDescription": "A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the code under test.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2699",
          "properties": {
            "category": "Blocker Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "SYSLIB1045": {
          "id": "SYSLIB1045",
          "shortDescription": "Convert to 'GeneratedRegexAttribute'.",
          "defaultLevel": "note",
          "properties": {
            "category": "GeneratedRegex",
            "isEnabledByDefault": true
          }
        }
      }
    }
  ]
}