{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.0.0.0",
        "fileVersion": "4.0.1-1.22181.2 (487283bc)",
        "semanticVersion": "4.0.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "CS0618",
          "level": "warning",
          "message": "'MatcherAttribute' is obsolete: 'This feature has been deprecated in favor of `Match.Create`.'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 4179,
                  "startColumn": 50,
                  "endLine": 4179,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0618",
          "level": "warning",
          "message": "'MatcherAttribute' is obsolete: 'This feature has been deprecated in favor of `Match.Create`.'",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 4179,
                  "startColumn": 50,
                  "endLine": 4179,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS0183",
          "level": "warning",
          "message": "The given expression is always of the provided ('int?') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 16,
                  "endLine": 33,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0183",
          "level": "warning",
          "message": "The given expression is always of the provided ('object') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 41,
                  "startColumn": 16,
                  "endLine": 41,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0184",
          "level": "warning",
          "message": "The given expression is never of the provided ('long') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0184",
          "level": "warning",
          "message": "The given expression is never of the provided ('int') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "endLine": 57,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0184",
          "level": "warning",
          "message": "The given expression is never of the provided ('uint') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "endLine": 65,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0184",
          "level": "warning",
          "message": "The given expression is never of the provided ('int?[]') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0184",
          "level": "warning",
          "message": "The given expression is never of the provided ('object[]') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 97,
                  "startColumn": 17,
                  "endLine": 97,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0184",
          "level": "warning",
          "message": "The given expression is never of the provided ('uint[]') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 105,
                  "startColumn": 17,
                  "endLine": 105,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0183",
          "level": "warning",
          "message": "The given expression is always of the provided ('IComparable') type",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/IsAssignableFromVsIsOperatorFixture.cs",
                "region": {
                  "startLine": 121,
                  "startColumn": 16,
                  "endLine": 121,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0067",
          "level": "warning",
          "message": "The event 'IssueReportsFixture.Issue893.A.E' is never used",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2998,
                  "startColumn": 33,
                  "endLine": 2998,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 3
          }
        },
        {
          "ruleId": "CA1050",
          "level": "note",
          "message": "Declare types in namespaces",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 30,
                  "startColumn": 14,
                  "endLine": 30,
                  "endColumn": 18
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1070",
          "level": "note",
          "message": "Event 'LeftButtonClicked' should not be declared virtual",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/EventHandlerTypesMustMatchFixture.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 44,
                  "endLine": 59,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1070",
          "level": "note",
          "message": "Event 'Event' should not be declared virtual",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/EventHandlersFixture.cs",
                "region": {
                  "startLine": 148,
                  "startColumn": 32,
                  "endLine": 148,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1070",
          "level": "note",
          "message": "Event 'VirtualEvent' should not be declared virtual",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockedEventsFixture.cs",
                "region": {
                  "startLine": 868,
                  "startColumn": 38,
                  "endLine": 868,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2231",
          "level": "note",
          "message": "Implement the equality operators and make their behavior identical to that of the Equals method",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 1399,
                  "startColumn": 18,
                  "endLine": 1399,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1070",
          "level": "note",
          "message": "Event 'E' should not be declared virtual",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2998,
                  "startColumn": 33,
                  "endLine": 2998,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1070",
          "level": "note",
          "message": "Event 'MyEvent' should not be declared virtual",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 5231,
                  "startColumn": 39,
                  "endLine": 5231,
                  "endColumn": 46
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1070",
          "level": "note",
          "message": "Event 'PropertyChanged' should not be declared virtual",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 5338,
                  "startColumn": 54,
                  "endLine": 5338,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertIncorrectlyReconstructsAs' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ActionObserverFixture.cs",
                "region": {
                  "startLine": 378,
                  "startColumn": 17,
                  "endLine": 378,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertIncorrectlyReconstructsAs' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ActionObserverFixture.cs",
                "region": {
                  "startLine": 385,
                  "startColumn": 17,
                  "endLine": 385,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Method' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ActionObserverFixture.cs",
                "region": {
                  "startLine": 352,
                  "startColumn": 17,
                  "endLine": 352,
                  "endColumn": 23
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'NonVirtual' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ActionObserverFixture.cs",
                "region": {
                  "startLine": 342,
                  "startColumn": 17,
                  "endLine": 342,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertFailsAfter' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ActionObserverFixture.cs",
                "region": {
                  "startLine": 327,
                  "startColumn": 17,
                  "endLine": 327,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertReconstructable' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ActionObserverFixture.cs",
                "region": {
                  "startLine": 261,
                  "startColumn": 17,
                  "endLine": 261,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertReconstructable' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ActionObserverFixture.cs",
                "region": {
                  "startLine": 254,
                  "startColumn": 17,
                  "endLine": 254,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/AfterReturnCallbackDelegateValidationFixture.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/AfterReturnCallbackDelegateValidationFixture.cs",
                "region": {
                  "startLine": 43,
                  "startColumn": 15,
                  "endLine": 43,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/AfterReturnCallbackDelegateValidationFixture.cs",
                "region": {
                  "startLine": 64,
                  "startColumn": 15,
                  "endLine": 64,
                  "endColumn": 86
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/AfterReturnCallbackDelegateValidationFixture.cs",
                "region": {
                  "startLine": 71,
                  "startColumn": 15,
                  "endLine": 71,
                  "endColumn": 85
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/AsInterfaceFixture.cs",
                "region": {
                  "startLine": 158,
                  "startColumn": 15,
                  "endLine": 158,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/AsInterfaceFixture.cs",
                "region": {
                  "startLine": 166,
                  "startColumn": 15,
                  "endLine": 166,
                  "endColumn": 90
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Func' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsDelegateValidationFixture.cs",
                "region": {
                  "startLine": 112,
                  "startColumn": 15,
                  "endLine": 112,
                  "endColumn": 19
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Action' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/CallbackDelegateValidationFixture.cs",
                "region": {
                  "startLine": 91,
                  "startColumn": 15,
                  "endLine": 91,
                  "endColumn": 21
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/CallBaseDefaultInterfaceImplementationsFixture.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 15,
                  "endLine": 15,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/CallBaseDefaultInterfaceImplementationsFixture.cs",
                "region": {
                  "startLine": 22,
                  "startColumn": 15,
                  "endLine": 22,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Any' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/CustomMatcherFixture.cs",
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "endLine": 34,
                  "endColumn": 20
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Between' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/CustomMatcherFixture.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "endLine": 39,
                  "endColumn": 24
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1827",
          "level": "note",
          "message": "Count() is used where Any() could be used instead to improve performance",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/EmptyDefaultValueProviderFixture.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 45,
                  "endLine": 59,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "OperationKey": "OperationBinaryLeft",
              "ShouldNegateKey": ""
            }
          }
        },
        {
          "ruleId": "xUnit1004",
          "level": "note",
          "message": "Test methods should not be skipped",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/FSharpCompatibilityFixture.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 11,
                  "endLine": 35,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/CustomTypeMatchersFixture.cs",
                "region": {
                  "startLine": 103,
                  "startColumn": 15,
                  "endLine": 103,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1825",
          "level": "note",
          "message": "Avoid unnecessary zero-length array allocations.  Use Array.Empty<object>() instead.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InterceptorFixture.cs",
                "region": {
                  "startLine": 54,
                  "startColumn": 81,
                  "endLine": 54,
                  "endColumn": 94
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'ToExpression' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExpressionExtensionsFixture.cs",
                "region": {
                  "startLine": 114,
                  "startColumn": 28,
                  "endLine": 114,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Do' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExpressionExtensionsFixture.cs",
                "region": {
                  "startLine": 129,
                  "startColumn": 16,
                  "endLine": 129,
                  "endColumn": 18
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'ToExpression' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExpressionExtensionsFixture.cs",
                "region": {
                  "startLine": 124,
                  "startColumn": 28,
                  "endLine": 124,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'ToExpression' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExpressionExtensionsFixture.cs",
                "region": {
                  "startLine": 119,
                  "startColumn": 28,
                  "endLine": 119,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'CreateMatch' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MatcherObserverFixture.cs",
                "region": {
                  "startLine": 62,
                  "startColumn": 15,
                  "endLine": 62,
                  "endColumn": 26
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "xUnit1004",
          "level": "note",
          "message": "Test methods should not be skipped",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/VerifyFixture.cs",
                "region": {
                  "startLine": 1338,
                  "startColumn": 9,
                  "endLine": 1338,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'ToExpression' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/AnyMatcherFixture.cs",
                "region": {
                  "startLine": 53,
                  "startColumn": 28,
                  "endLine": 53,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/ParamArrayMatcherFixture.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 15,
                  "endLine": 33,
                  "endColumn": 70
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'ToExpression' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/ParamArrayMatcherFixture.cs",
                "region": {
                  "startLine": 45,
                  "startColumn": 28,
                  "endLine": 45,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'GetParameterTypeList' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExtensionsFixture.cs",
                "region": {
                  "startLine": 115,
                  "startColumn": 18,
                  "endLine": 115,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MatcherAttributeFixture.cs",
                "region": {
                  "startLine": 106,
                  "startColumn": 15,
                  "endLine": 106,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1827",
          "level": "note",
          "message": "Count() is used where Any() could be used instead to improve performance",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockDefaultValueProviderFixture.cs",
                "region": {
                  "startLine": 46,
                  "startColumn": 45,
                  "endLine": 46,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "OperationKey": "OperationBinaryLeft",
              "ShouldNegateKey": ""
            }
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockedDelegatesFixture.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 15,
                  "endLine": 14,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1806",
          "level": "note",
          "message": "CanMockDelegate creates a new instance of Mock which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockedDelegatesFixture.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 4,
                  "endLine": 16,
                  "endColumn": 28
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "xUnit1004",
          "level": "note",
          "message": "Test methods should not be skipped",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Matchers/ConstantMatcherFixture.cs",
                "region": {
                  "startLine": 37,
                  "startColumn": 10,
                  "endLine": 37,
                  "endColumn": 106
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockedDelegatesFixture.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "endLine": 39,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Any' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Linq/SupportedQuerying.cs",
                "region": {
                  "startLine": 240,
                  "startColumn": 18,
                  "endLine": 240,
                  "endColumn": 21
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MatcherAttributeFixture.cs",
                "region": {
                  "startLine": 161,
                  "startColumn": 15,
                  "endLine": 161,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'NonVirtualValue' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Linq/UnsupportedQuerying.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "endLine": 35,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockedEventsFixture.cs",
                "region": {
                  "startLine": 60,
                  "startColumn": 15,
                  "endLine": 60,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockSequenceFixture.cs",
                "region": {
                  "startLine": 11,
                  "startColumn": 15,
                  "endLine": 11,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MatcherAttributeFixture.cs",
                "region": {
                  "startLine": 198,
                  "startColumn": 15,
                  "endLine": 198,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MatcherAttributeFixture.cs",
                "region": {
                  "startLine": 220,
                  "startColumn": 15,
                  "endLine": 220,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'DoNonVirtual' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 251,
                  "startColumn": 16,
                  "endLine": 251,
                  "endColumn": 28
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'NonVirtualGet' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 254,
                  "startColumn": 15,
                  "endLine": 254,
                  "endColumn": 28
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'VirtualGet' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 259,
                  "startColumn": 15,
                  "endLine": 259,
                  "endColumn": 25
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1825",
          "level": "note",
          "message": "Avoid unnecessary zero-length array allocations.  Use Array.Empty<string>() instead.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 273,
                  "startColumn": 12,
                  "endLine": 273,
                  "endColumn": 25
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1825",
          "level": "note",
          "message": "Avoid unnecessary zero-length array allocations.  Use Array.Empty<string[]>() instead.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 278,
                  "startColumn": 12,
                  "endLine": 278,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1825",
          "level": "note",
          "message": "Avoid unnecessary zero-length array allocations.  Use Array.Empty<string>() instead.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 288,
                  "startColumn": 12,
                  "endLine": 288,
                  "endColumn": 25
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1825",
          "level": "note",
          "message": "Avoid unnecessary zero-length array allocations.  Use Array.Empty<object>() instead.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 293,
                  "startColumn": 12,
                  "endLine": 293,
                  "endColumn": 25
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1825",
          "level": "note",
          "message": "Avoid unnecessary zero-length array allocations.  Use Array.Empty<string>() instead.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 303,
                  "startColumn": 12,
                  "endLine": 303,
                  "endColumn": 25
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1825",
          "level": "note",
          "message": "Avoid unnecessary zero-length array allocations.  Use Array.Empty<object>() instead.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockBehaviorFixture.cs",
                "region": {
                  "startLine": 308,
                  "startColumn": 12,
                  "endLine": 308,
                  "endColumn": 25
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1041",
          "level": "note",
          "message": "Provide a message for the ObsoleteAttribute that marks OnceThrowsOnSecondCall as Obsolete",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/OccurrenceFixture.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 4,
                  "endLine": 13,
                  "endColumn": 12
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1041",
          "level": "note",
          "message": "Provide a message for the ObsoleteAttribute that marks RepeatThrowsOnNPlusOneCall as Obsolete",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/OccurrenceFixture.cs",
                "region": {
                  "startLine": 27,
                  "startColumn": 4,
                  "endLine": 27,
                  "endColumn": 12
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1041",
          "level": "note",
          "message": "Provide a message for the ObsoleteAttribute that marks Invocations_Clear_resets_count_kept_by_setup_AtMost as Obsolete",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InvocationsFixture.cs",
                "region": {
                  "startLine": 278,
                  "startColumn": 4,
                  "endLine": 278,
                  "endColumn": 14
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/RecordsFixture.cs",
                "region": {
                  "startLine": 11,
                  "startColumn": 15,
                  "endLine": 11,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/RecordsFixture.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 15,
                  "endLine": 17,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/PropertiesFixture.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 15,
                  "endLine": 55,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/PropertiesFixture.cs",
                "region": {
                  "startLine": 65,
                  "startColumn": 15,
                  "endLine": 65,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/PropertiesFixture.cs",
                "region": {
                  "startLine": 75,
                  "startColumn": 15,
                  "endLine": 75,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/PropertiesFixture.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 15,
                  "endLine": 83,
                  "endColumn": 46
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'NonVirtual' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Linq/UnsupportedQuerying.cs",
                "region": {
                  "startLine": 115,
                  "startColumn": 16,
                  "endLine": 115,
                  "endColumn": 26
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1041",
          "level": "note",
          "message": "Provide a message for the ObsoleteAttribute that marks CallsThatThrowExceptionStillCountAsCalls as Obsolete",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/OccurrenceFixture.cs",
                "region": {
                  "startLine": 53,
                  "startColumn": 4,
                  "endLine": 53,
                  "endColumn": 12
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InvocationsFixture.cs",
                "region": {
                  "startLine": 318,
                  "startColumn": 21,
                  "endLine": 318,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'NonVirtual' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Linq/UnsupportedQuerying.cs",
                "region": {
                  "startLine": 102,
                  "startColumn": 19,
                  "endLine": 102,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsDelegateValidationFixture.cs",
                "region": {
                  "startLine": 84,
                  "startColumn": 15,
                  "endLine": 84,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsDelegateValidationFixture.cs",
                "region": {
                  "startLine": 91,
                  "startColumn": 15,
                  "endLine": 91,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InvocationsFixture.cs",
                "region": {
                  "startLine": 343,
                  "startColumn": 21,
                  "endLine": 343,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InvocationsFixture.cs",
                "region": {
                  "startLine": 344,
                  "startColumn": 16,
                  "endLine": 344,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InvocationsFixture.cs",
                "region": {
                  "startLine": 328,
                  "startColumn": 16,
                  "endLine": 328,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InvocationsFixture.cs",
                "region": {
                  "startLine": 331,
                  "startColumn": 21,
                  "endLine": 331,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InvocationsFixture.cs",
                "region": {
                  "startLine": 354,
                  "startColumn": 16,
                  "endLine": 354,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/InvocationsFixture.cs",
                "region": {
                  "startLine": 357,
                  "startColumn": 21,
                  "endLine": 357,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockFixture.cs",
                "region": {
                  "startLine": 228,
                  "startColumn": 15,
                  "endLine": 228,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 4115,
                  "startColumn": 15,
                  "endLine": 4115,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 4082,
                  "startColumn": 15,
                  "endLine": 4082,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockedEventsFixture.cs",
                "region": {
                  "startLine": 239,
                  "startColumn": 15,
                  "endLine": 239,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1507",
          "level": "note",
          "message": "Use nameof in place of string literal 'Value'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockedDelegatesFixture.cs",
                "region": {
                  "startLine": 186,
                  "startColumn": 52,
                  "endLine": 186,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertSplitFails' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExpressionSplitFixture.cs",
                "region": {
                  "startLine": 299,
                  "startColumn": 16,
                  "endLine": 299,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertSplitFails' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExpressionSplitFixture.cs",
                "region": {
                  "startLine": 294,
                  "startColumn": 16,
                  "endLine": 294,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertSplitYields' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExpressionSplitFixture.cs",
                "region": {
                  "startLine": 304,
                  "startColumn": 16,
                  "endLine": 304,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'AssertSplitYields' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ExpressionSplitFixture.cs",
                "region": {
                  "startLine": 309,
                  "startColumn": 16,
                  "endLine": 309,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ProtectedMockFixture.cs",
                "region": {
                  "startLine": 446,
                  "startColumn": 15,
                  "endLine": 446,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ProtectedMockFixture.cs",
                "region": {
                  "startLine": 488,
                  "startColumn": 15,
                  "endLine": 488,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'GetToRange' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MatchersFixture.cs",
                "region": {
                  "startLine": 403,
                  "startColumn": 15,
                  "endLine": 403,
                  "endColumn": 25
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/CallbacksFixture.cs",
                "region": {
                  "startLine": 402,
                  "startColumn": 15,
                  "endLine": 402,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockFixture.cs",
                "region": {
                  "startLine": 738,
                  "startColumn": 15,
                  "endLine": 738,
                  "endColumn": 46
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockedEventsFixture.cs",
                "region": {
                  "startLine": 598,
                  "startColumn": 15,
                  "endLine": 598,
                  "endColumn": 71
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/UnmatchableMatchersFixture.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 15,
                  "endLine": 21,
                  "endColumn": 88
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/UnmatchableMatchersFixture.cs",
                "region": {
                  "startLine": 28,
                  "startColumn": 15,
                  "endLine": 28,
                  "endColumn": 95
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/UnmatchableMatchersFixture.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 15,
                  "endLine": 35,
                  "endColumn": 104
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 39,
                  "endLine": 56,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'GetAppendExpressionResult' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/StringBuilderExtensionsFixture.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 18,
                  "endLine": 52,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/StubExtensionsFixture.cs",
                "region": {
                  "startLine": 191,
                  "startColumn": 15,
                  "endLine": 191,
                  "endColumn": 68
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 72,
                  "startColumn": 39,
                  "endLine": 72,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 16,
                  "endLine": 21,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 47,
                  "startColumn": 16,
                  "endLine": 47,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 37,
                  "startColumn": 16,
                  "endLine": 37,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 61,
                  "startColumn": 16,
                  "endLine": 61,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 90,
                  "startColumn": 39,
                  "endLine": 90,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 91,
                  "startColumn": 39,
                  "endLine": 91,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 499,
                  "startColumn": 15,
                  "endLine": 499,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 501,
                  "startColumn": 4,
                  "endLine": 501,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 75,
                  "startColumn": 16,
                  "endLine": 75,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 89,
                  "startColumn": 16,
                  "endLine": 89,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 103,
                  "startColumn": 16,
                  "endLine": 103,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 512,
                  "startColumn": 15,
                  "endLine": 512,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 514,
                  "startColumn": 4,
                  "endLine": 514,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "xUnit2000",
          "level": "warning",
          "message": "The literal or constant value default(Times) should be passed as the 'expected' argument in the call to 'Assert.Equal(expected, actual)' in method 'default_Equals_AtLeastOnce' on type 'Equality'.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/TimesFixture.cs",
                "region": {
                  "startLine": 274,
                  "startColumn": 5,
                  "endLine": 274,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'GetValue' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/StubExtensionsFixture.cs",
                "region": {
                  "startLine": 288,
                  "startColumn": 18,
                  "endLine": 288,
                  "endColumn": 26
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 525,
                  "startColumn": 15,
                  "endLine": 525,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 527,
                  "startColumn": 4,
                  "endLine": 527,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 538,
                  "startColumn": 15,
                  "endLine": 538,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 540,
                  "startColumn": 4,
                  "endLine": 540,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 117,
                  "startColumn": 16,
                  "endLine": 117,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 127,
                  "startColumn": 16,
                  "endLine": 127,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 147,
                  "startColumn": 16,
                  "endLine": 147,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 156,
                  "startColumn": 16,
                  "endLine": 156,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 137,
                  "startColumn": 16,
                  "endLine": 137,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 564,
                  "startColumn": 15,
                  "endLine": 564,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 566,
                  "startColumn": 4,
                  "endLine": 566,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 167,
                  "startColumn": 16,
                  "endLine": 167,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 551,
                  "startColumn": 15,
                  "endLine": 551,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 553,
                  "startColumn": 4,
                  "endLine": 553,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 577,
                  "startColumn": 15,
                  "endLine": 577,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 579,
                  "startColumn": 4,
                  "endLine": 579,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 5353,
                  "startColumn": 16,
                  "endLine": 5353,
                  "endColumn": 20
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1821",
          "level": "note",
          "message": "Remove empty Finalizers",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 5417,
                  "startColumn": 6,
                  "endLine": 5417,
                  "endColumn": 24
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 5107,
                  "startColumn": 16,
                  "endLine": 5107,
                  "endColumn": 20
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SequenceExtensionsFixture.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 46
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SequenceExtensionsFixture.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 20,
                  "endLine": 56,
                  "endColumn": 46
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 5250,
                  "startColumn": 16,
                  "endLine": 5250,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'ShouldRenderCustomMessage' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 4778,
                  "startColumn": 16,
                  "endLine": 4778,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 4011,
                  "startColumn": 16,
                  "endLine": 4011,
                  "endColumn": 74
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 3974,
                  "startColumn": 16,
                  "endLine": 3974,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 3769,
                  "startColumn": 16,
                  "endLine": 3769,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 3486,
                  "startColumn": 16,
                  "endLine": 3486,
                  "endColumn": 20
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 3211,
                  "startColumn": 16,
                  "endLine": 3211,
                  "endColumn": 84
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2751,
                  "startColumn": 16,
                  "endLine": 2751,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2757,
                  "startColumn": 16,
                  "endLine": 2757,
                  "endColumn": 74
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2764,
                  "startColumn": 16,
                  "endLine": 2764,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2771,
                  "startColumn": 16,
                  "endLine": 2771,
                  "endColumn": 85
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 3416,
                  "startColumn": 16,
                  "endLine": 3416,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2643,
                  "startColumn": 16,
                  "endLine": 2643,
                  "endColumn": 92
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 3292,
                  "startColumn": 16,
                  "endLine": 3292,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2546,
                  "startColumn": 16,
                  "endLine": 2546,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 207,
                  "startColumn": 16,
                  "endLine": 207,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 3302,
                  "startColumn": 16,
                  "endLine": 3302,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2277,
                  "startColumn": 16,
                  "endLine": 2277,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2289,
                  "startColumn": 16,
                  "endLine": 2289,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2302,
                  "startColumn": 16,
                  "endLine": 2302,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "xUnit1004",
          "level": "note",
          "message": "Test methods should not be skipped",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2282,
                  "startColumn": 10,
                  "endLine": 2282,
                  "endColumn": 122
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2308,
                  "startColumn": 16,
                  "endLine": 2308,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2014,
                  "startColumn": 16,
                  "endLine": 2014,
                  "endColumn": 116
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2434,
                  "startColumn": 22,
                  "endLine": 2434,
                  "endColumn": 80
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'TestImpl' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 3272,
                  "startColumn": 17,
                  "endLine": 3272,
                  "endColumn": 25
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 1652,
                  "startColumn": 16,
                  "endLine": 1652,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2582,
                  "startColumn": 16,
                  "endLine": 2582,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2324,
                  "startColumn": 16,
                  "endLine": 2324,
                  "endColumn": 114
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2590,
                  "startColumn": 16,
                  "endLine": 2590,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'NonVirtual' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ProtectedMockFixture.cs",
                "region": {
                  "startLine": 1179,
                  "startColumn": 19,
                  "endLine": 1179,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'NonVirtualInt' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ProtectedMockFixture.cs",
                "region": {
                  "startLine": 1183,
                  "startColumn": 18,
                  "endLine": 1183,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'True' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockFixture.cs",
                "region": {
                  "startLine": 1176,
                  "startColumn": 16,
                  "endLine": 1176,
                  "endColumn": 20
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'ExecuteSameFirstParameter' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ProtectedMockFixture.cs",
                "region": {
                  "startLine": 1001,
                  "startColumn": 16,
                  "endLine": 1001,
                  "endColumn": 41
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2197,
                  "startColumn": 16,
                  "endLine": 2197,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 217,
                  "startColumn": 16,
                  "endLine": 217,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1816",
          "level": "note",
          "message": "Change IssueReportsFixture.Issue592.Dispose() to call GC.SuppressFinalize(object). This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2204,
                  "startColumn": 16,
                  "endLine": 2204,
                  "endColumn": 23
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 227,
                  "startColumn": 16,
                  "endLine": 227,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2169,
                  "startColumn": 16,
                  "endLine": 2169,
                  "endColumn": 75
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Can_mock_class_type_where_generic_type_parameter_name_diverges_from_name_in_interface' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 973,
                  "startColumn": 16,
                  "endLine": 973,
                  "endColumn": 101
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'GetVerificationErrorAsync' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2880,
                  "startColumn": 34,
                  "endLine": 2880,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 2446,
                  "startColumn": 22,
                  "endLine": 2446,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'Foo' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 1631,
                  "startColumn": 16,
                  "endLine": 1631,
                  "endColumn": 19
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 237,
                  "startColumn": 16,
                  "endLine": 237,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 190,
                  "startColumn": 16,
                  "endLine": 190,
                  "endColumn": 87
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 247,
                  "startColumn": 16,
                  "endLine": 247,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 726,
                  "startColumn": 16,
                  "endLine": 726,
                  "endColumn": 111
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'TestMethod' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 144,
                  "startColumn": 16,
                  "endLine": 144,
                  "endColumn": 26
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 155,
                  "startColumn": 22,
                  "endLine": 155,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'GetValue' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockFixture.cs",
                "region": {
                  "startLine": 222,
                  "startColumn": 15,
                  "endLine": 222,
                  "endColumn": 23
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'IsMultipleOf' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/MockFixture.cs",
                "region": {
                  "startLine": 759,
                  "startColumn": 15,
                  "endLine": 759,
                  "endColumn": 27
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1816",
          "level": "note",
          "message": "Change IssueReportsFixture.Issue157.Stream.Dispose() to call GC.SuppressFinalize(object). This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 408,
                  "startColumn": 17,
                  "endLine": 408,
                  "endColumn": 24
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 164,
                  "startColumn": 22,
                  "endLine": 164,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 590,
                  "startColumn": 15,
                  "endLine": 590,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 592,
                  "startColumn": 4,
                  "endLine": 592,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 257,
                  "startColumn": 16,
                  "endLine": 257,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 268,
                  "startColumn": 16,
                  "endLine": 268,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 278,
                  "startColumn": 16,
                  "endLine": 278,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "S2699",
          "level": "warning",
          "message": "Add at least one assertion to this test case.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/Regressions/IssueReportsFixture.cs",
                "region": {
                  "startLine": 201,
                  "startColumn": 16,
                  "endLine": 201,
                  "endColumn": 90
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 173,
                  "startColumn": 22,
                  "endLine": 173,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 603,
                  "startColumn": 15,
                  "endLine": 603,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 605,
                  "startColumn": 4,
                  "endLine": 605,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 182,
                  "startColumn": 22,
                  "endLine": 182,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 302,
                  "startColumn": 16,
                  "endLine": 302,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 290,
                  "startColumn": 16,
                  "endLine": 290,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 191,
                  "startColumn": 22,
                  "endLine": 191,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 332,
                  "startColumn": 16,
                  "endLine": 332,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 335,
                  "startColumn": 25,
                  "endLine": 335,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 316,
                  "startColumn": 16,
                  "endLine": 316,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 319,
                  "startColumn": 25,
                  "endLine": 319,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 348,
                  "startColumn": 16,
                  "endLine": 348,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 351,
                  "startColumn": 25,
                  "endLine": 351,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 616,
                  "startColumn": 15,
                  "endLine": 616,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 618,
                  "startColumn": 4,
                  "endLine": 618,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 238,
                  "startColumn": 25,
                  "endLine": 238,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 248,
                  "startColumn": 25,
                  "endLine": 248,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 364,
                  "startColumn": 16,
                  "endLine": 364,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 367,
                  "startColumn": 25,
                  "endLine": 367,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 229,
                  "startColumn": 22,
                  "endLine": 229,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 629,
                  "startColumn": 15,
                  "endLine": 629,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 631,
                  "startColumn": 4,
                  "endLine": 631,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 394,
                  "startColumn": 16,
                  "endLine": 394,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 291,
                  "startColumn": 30,
                  "endLine": 291,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 379,
                  "startColumn": 16,
                  "endLine": 379,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 382,
                  "startColumn": 25,
                  "endLine": 382,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 412,
                  "startColumn": 16,
                  "endLine": 412,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 430,
                  "startColumn": 16,
                  "endLine": 430,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 434,
                  "startColumn": 30,
                  "endLine": 434,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 302,
                  "startColumn": 30,
                  "endLine": 302,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 449,
                  "startColumn": 16,
                  "endLine": 449,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA1826",
          "level": "note",
          "message": "Do not use Enumerable methods on indexable collections. Instead use the collection directly.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupFixture.cs",
                "region": {
                  "startLine": 453,
                  "startColumn": 30,
                  "endLine": 453,
                  "endColumn": 69
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "method": "First"
            }
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 642,
                  "startColumn": 15,
                  "endLine": 642,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 644,
                  "startColumn": 4,
                  "endLine": 644,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 655,
                  "startColumn": 20,
                  "endLine": 655,
                  "endColumn": 46
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 656,
                  "startColumn": 21,
                  "endLine": 656,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 658,
                  "startColumn": 4,
                  "endLine": 658,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 659,
                  "startColumn": 4,
                  "endLine": 659,
                  "endColumn": 46
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 313,
                  "startColumn": 30,
                  "endLine": 313,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 358,
                  "startColumn": 30,
                  "endLine": 358,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 686,
                  "startColumn": 4,
                  "endLine": 686,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 380,
                  "startColumn": 30,
                  "endLine": 380,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 700,
                  "startColumn": 4,
                  "endLine": 700,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 368,
                  "startColumn": 30,
                  "endLine": 368,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 405,
                  "startColumn": 25,
                  "endLine": 405,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 436,
                  "startColumn": 25,
                  "endLine": 436,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 714,
                  "startColumn": 4,
                  "endLine": 714,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 669,
                  "startColumn": 20,
                  "endLine": 669,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 670,
                  "startColumn": 21,
                  "endLine": 670,
                  "endColumn": 64
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 672,
                  "startColumn": 4,
                  "endLine": 672,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 673,
                  "startColumn": 4,
                  "endLine": 673,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/SetupTaskResultFixture.cs",
                "region": {
                  "startLine": 446,
                  "startColumn": 25,
                  "endLine": 446,
                  "endColumn": 52
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 728,
                  "startColumn": 4,
                  "endLine": 728,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 742,
                  "startColumn": 4,
                  "endLine": 742,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 771,
                  "startColumn": 4,
                  "endLine": 771,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2012",
          "level": "note",
          "message": "ValueTask instances returned from method calls should always be used, typically awaited. Not doing so often represents a functional bug, but even if it doesn't, it can result in degraded performance if the target method pools objects for use with ValueTasks.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/msedlyarskiy/benchmark/projects/moq4/tests/Moq.Tests/ReturnsExtensionsFixture.cs",
                "region": {
                  "startLine": 756,
                  "startColumn": 4,
                  "endLine": 756,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "CA1041": {
          "id": "CA1041",
          "shortDescription": "Provide ObsoleteAttribute message",
          "fullDescription": "A type or member is marked by using a System.ObsoleteAttribute attribute that does not have its ObsoleteAttribute.Message property specified. When a type or member that is marked by using ObsoleteAttribute is compiled, the Message property of the attribute is displayed. This gives the user information about the obsolete type or member.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1041",
          "properties": {
            "category": "Design",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1050": {
          "id": "CA1050",
          "shortDescription": "Declare types in namespaces",
          "fullDescription": "Types are declared in namespaces to prevent name collisions and as a way to organize related types in an object hierarchy.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1050",
          "properties": {
            "category": "Design",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1070": {
          "id": "CA1070",
          "shortDescription": "Do not declare event fields as virtual",
          "fullDescription": "Do not declare virtual events in a base class. Overridden events in a derived class have undefined behavior. The C# compiler does not handle this correctly and it is unpredictable whether a subscriber to the derived event will actually be subscribing to the base class event.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1070",
          "properties": {
            "category": "Design",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1507": {
          "id": "CA1507",
          "shortDescription": "Use nameof to express symbol names",
          "fullDescription": "Using nameof helps keep your code valid when refactoring.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1507",
          "properties": {
            "category": "Maintainability",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1806": {
          "id": "CA1806",
          "shortDescription": "Do not ignore method results",
          "fullDescription": "A new object is created but never used; or a method that creates and returns a new string is called and the new string is never used; or a COM or P/Invoke method returns an HRESULT or error code that is never used.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1806",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1816": {
          "id": "CA1816",
          "shortDescription": "Dispose methods should call SuppressFinalize",
          "fullDescription": "A method that is an implementation of Dispose does not call GC.SuppressFinalize; or a method that is not an implementation of Dispose calls GC.SuppressFinalize; or a method calls GC.SuppressFinalize and passes something other than this (Me in Visual Basic).",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1816",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1821": {
          "id": "CA1821",
          "shortDescription": "Remove empty Finalizers",
          "fullDescription": "Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1821",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1822": {
          "id": "CA1822",
          "shortDescription": "Mark members as static",
          "fullDescription": "Members that do not access instance data or call instance methods can be marked as static. After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. This can give you a measurable performance gain for performance-sensitive code.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1822",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1825": {
          "id": "CA1825",
          "shortDescription": "Avoid zero-length array allocations",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1825",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1826": {
          "id": "CA1826",
          "shortDescription": "Do not use Enumerable methods on indexable collections",
          "fullDescription": "This collection is directly indexable. Going through LINQ here causes unnecessary allocations and CPU work.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1826",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA1827": {
          "id": "CA1827",
          "shortDescription": "Do not use Count() or LongCount() when Any() can be used",
          "fullDescription": "For non-empty collections, Count() and LongCount() enumerate the entire sequence, while Any() stops at the first item or the first item that satisfies a condition.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1827",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA2012": {
          "id": "CA2012",
          "shortDescription": "Use ValueTasks correctly",
          "fullDescription": "ValueTasks returned from member invocations are intended to be directly awaited.  Attempts to consume a ValueTask multiple times or to directly access one's result before it's known to be completed may result in an exception or corruption.  Ignoring such a ValueTask is likely an indication of a functional bug and may degrade performance.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2012",
          "properties": {
            "category": "Reliability",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA2231": {
          "id": "CA2231",
          "shortDescription": "Overload operator equals on overriding value type Equals",
          "fullDescription": "In most programming languages there is no default implementation of the equality operator (==) for value types. If your programming language supports operator overloads, you should consider implementing the equality operator. Its behavior should be identical to that of Equals.",
          "defaultLevel": "note",
          "helpUri": "https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2231",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CS0067": {
          "id": "CS0067",
          "shortDescription": "Event is never used",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0067)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS0183": {
          "id": "CS0183",
          "shortDescription": "'is' expression's given expression is always of the provided type",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0183)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS0184": {
          "id": "CS0184",
          "shortDescription": "'is' expression's given expression is never of the provided type",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0184)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS0618": {
          "id": "CS0618",
          "shortDescription": "Type or member is obsolete",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0618)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "S2699": {
          "id": "S2699",
          "shortDescription": "Tests should include assertions",
          "fullDescription": "A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the code under test.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2699",
          "properties": {
            "category": "Blocker Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "xUnit1004": {
          "id": "xUnit1004",
          "shortDescription": "Test methods should not be skipped",
          "defaultLevel": "note",
          "helpUri": "https://xunit.github.io/xunit.analyzers/rules/xUnit1004",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true
          }
        },
        "xUnit2000": {
          "id": "xUnit2000",
          "shortDescription": "Constants and literals should be the expected argument",
          "fullDescription": "The xUnit.net Assertion library produces the best error messages if the expected value is passed in as the expected argument.",
          "defaultLevel": "warning",
          "helpUri": "https://xunit.github.io/xunit.analyzers/rules/xUnit2000",
          "properties": {
            "category": "Assertions",
            "isEnabledByDefault": true
          }
        }
      }
    }
  ]
}